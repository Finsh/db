

# ##### 1001 ##########
INSERT INTO `admin_social`.`profile` (`id`, `login`, `password`, `email`, `firstname`, `lastname`, `middlename`, `telephone`,`mobile`,`email2`,`city`,`country`, `birthday`)
VALUES (1001,"cherry","cherry","1@mail.ru","Роман","Черешня","Владимирович","+380487267316","+380633767526",null,"Одесса","Украина","1992-10-08");

# ##############################
#          WALL
# #################################
# WALL
CREATE  TABLE IF NOT EXISTS `admin_social`.`wall1001` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `datetime` DATETIME NOT NULL , `idauthor` INT UNSIGNED NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_wll1001_wll10011_idx` (`extension` ASC) , CONSTRAINT `fk_wll1001_wll10011` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`wall1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# WALL COMMENTS
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentwall1001` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `wall1001_id` INT UNSIGNED NOT NULL , `commentwall1001_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comwll1001_wall10011_idx` (`wall1001_id` ASC) , INDEX `fk_comwll1001_comwll10011_idx` (`commentwall1001_id` ASC) , INDEX `fk_comwll1001_prf1_idx` (`profile_id` ASC) , INDEX `fk_comwll1001_comwll10012_idx` (`extension` ASC) , CONSTRAINT `fk_comwll1001_wall10011` FOREIGN KEY (`wall1001_id` ) REFERENCES `admin_social`.`wall1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comwll1001_comwll10011` FOREIGN KEY (`commentwall1001_id` ) REFERENCES `admin_social`.`commentwall1001` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comwll1001_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comwll1001_comwll10012` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentwall1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# LIKE WALL COMMENTS
CREATE TABLE IF NOT EXISTS `admin_social`.`likecommentwall1001` (`commentwall1001_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomwll1001_comwll10011_idx` (`commentwall1001_id` ASC) , INDEX `fk_lkcomwll1001_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomwll1001_comwll10011` FOREIGN KEY (`commentwall1001_id` ) REFERENCES `admin_social`.`commentwall1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomwll1001_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# LIKE WALL
CREATE  TABLE IF NOT EXISTS `admin_social`.`likewall1001` (`wall1001_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkwll1001_wll10011_idx` (`wall1001_id` ASC) , INDEX `fk_lkwll1001_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkwll1001_wll10011` FOREIGN KEY (`wall1001_id` ) REFERENCES `admin_social`.`wall1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkwll1001_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ###############################
#       BLOG
# ################################
# CREATE BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`blog1001` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `extension` INT UNSIGNED NULL , `name` VARCHAR(256) NOT NULL , `source` TEXT NULL , `idauthor` INT UNSIGNED NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_blg1001_blg10011_idx` (`extension` ASC) , CONSTRAINT `fk_blg1001_blg10011` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`blog1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`likeblog1001` (`blog1001_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkblg1001_blg10011_idx` (`blog1001_id` ASC) , INDEX `fk_lkblg1001_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkblg1001_blg10011` FOREIGN KEY (`blog1001_id` ) REFERENCES `admin_social`.`blog1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkblg1001_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentblog1001` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `blog1001_id` INT UNSIGNED NOT NULL , `commentblog1001_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comblg1001_blg10011_idx` (`blog1001_id` ASC) , INDEX `fk_comblg1001_comblg10011_idx` (`commentblog1001_id` ASC) , INDEX `fk_comblg1001_prf1_idx` (`profile_id` ASC) , INDEX `fk_comblg1001_comblg10012_idx` (`extension` ASC) , CONSTRAINT `fk_comblg1001_blg10011` FOREIGN KEY (`blog1001_id` ) REFERENCES `admin_social`.`blog1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comblg1001_comblg10011` FOREIGN KEY (`commentblog1001_id` ) REFERENCES `admin_social`.`commentblog1001` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comblg1001_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comblg1001_comblg10012` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentblog1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE BLOG COMMENT
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentblog1001` (`commentblog1001_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomblg1001_comblg10011_idx` (`commentblog1001_id` ASC) , INDEX `fk_lkcomblg1001_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomblg1001_comblg10011` FOREIGN KEY (`commentblog1001_id` ) REFERENCES `admin_social`.`commentblog1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomblg1001_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ####################################
#       ALBUM
# ####################################
# CREATE ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`album1001` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `name` VARCHAR(150) NOT NULL , `description` VARCHAR(256) NULL , `countphoto` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `coverpagephoto` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# CREATE LIKE ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`likealbum1001` (`album1001_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkalb1001_alb10011_idx` (`album1001_id` ASC) , INDEX `fk_lkalb1001_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkalb1001_alb10011` FOREIGN KEY (`album1001_id` ) REFERENCES `admin_social`.`album1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkalb1001_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentalbum1001` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `album1001_id` INT UNSIGNED NOT NULL , `commentalbum1001_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_commentalbum1001_albumN1_idx` (`album1001_id` ASC) , INDEX `fk_commentalbum1001_ommentalbum10011_idx` (`commentalbum1001_id` ASC) , INDEX `fk_commentalbum1001_profile1_idx` (`profile_id` ASC) , INDEX `fk_commentalbum1001_commentalbum10012_idx` (`extension` ASC) , CONSTRAINT `fk_commentalbum1001_album10011` FOREIGN KEY (`album1001_id` ) REFERENCES `admin_social`.`album1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1001_commentalbum10011` FOREIGN KEY (`commentalbum1001_id` ) REFERENCES `admin_social`.`commentalbum1001` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1001_profile1001` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1001_commentalbum10012` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentalbum1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE COMMENT ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentalbum1001` (`commentalbum1001_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomalb1001_comalb10011_idx` (`commentalbum1001_id` ASC) , INDEX `fk_lkcomalb1001_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomalb1001_comalb10011` FOREIGN KEY (`commentalbum1001_id` ) REFERENCES `admin_social`.`commentalbum1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomalb1001_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##########################################
#       SPISOKALBUMPHOTO
# ##########################################
# CREATE SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokalbumphoto1001` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `date` DATETIME NOT NULL , `album1001_id` INT UNSIGNED NOT NULL , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `name` VARCHAR(256) NULL , `description` VARCHAR(256) NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_spisokalbumphoto1001_album10011_idx` (`album1001_id` ASC) , CONSTRAINT `fk_spisokalbumphoto1001_album10011` FOREIGN KEY (`album1001_id` ) REFERENCES `admin_social`.`album1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`likespisokalbumphoto1001` (`spisokalbumphoto1001_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkssalbpht1001_spalbpht10011_idx` (`spisokalbumphoto1001_id` ASC) , INDEX `fk_lkssalbpht1001_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkssalbpht1001_spalbpht10011` FOREIGN KEY (`spisokalbumphoto1001_id` ) REFERENCES `admin_social`.`spisokalbumphoto1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkssalbpht1001_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentspisokalbumphoto1001` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `spisokalbumphoto1001_id` INT UNSIGNED NOT NULL , `commentspisokalbumphoto1001_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , INDEX `fk_comspalbpht1001_spalbpht10011_idx` (`spisokalbumphoto1001_id` ASC) , INDEX `fk_comspalbpht1001_comspalbpht10011_idx` (`commentspisokalbumphoto1001_id` ASC) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comspalbpht1001_prf1_idx` (`profile_id` ASC) , INDEX `fk_comspalbpht1001_comspalbpht10012_idx` (`extension` ASC) , CONSTRAINT `fk_comspalbpht1001_spalbpht10011` FOREIGN KEY (`spisokalbumphoto1001_id` ) REFERENCES `admin_social`.`spisokalbumphoto1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1001_comspalbpht10011` FOREIGN KEY (`commentspisokalbumphoto1001_id` ) REFERENCES `admin_social`.`commentspisokalbumphoto1001` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1001_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1001_comspalbpht10012` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentspisokalbumphoto1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE COMMENTSPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentspisokalbumphoto1001` (`commentspisokalbumphoto1001_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomspalbpht1001_comspalbpht10011_idx` (`commentspisokalbumphoto1001_id` ASC) , INDEX `fk_lkcomspalbpht1001_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomspalbpht1001_comspalbpht10011` FOREIGN KEY (`commentspisokalbumphoto1001_id` ) REFERENCES `admin_social`.`commentspisokalbumphoto1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomspalbpht1001_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##################################################
#       AVATAR
# ##################################################
# CREATE AVATAR
CREATE  TABLE IF NOT EXISTS `admin_social`.`avatar1001` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `isavatar` TINYINT(1) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `datetime` DATETIME NOT NULL , `prev` INT UNSIGNED NULL ,`update` DATETIME NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# ##################################################
#       MESSAGE
# ##################################################
# CREATE MESSAGE
CREATE  TABLE IF NOT EXISTS `admin_social`.`message1001` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `datetime` DATETIME NOT NULL , `messagegroup_id` INT UNSIGNED NULL , `idrecepient` INT UNSIGNED NULL , `idsender` INT UNSIGNED NULL , `extension` INT UNSIGNED NULL , `new` TINYINT(1) NOT NULL DEFAULT 1 , INDEX `fk_mes1001_mesgr_idx` (`messagegroup_id` ASC) , INDEX `fk_mes1001_prf1_idx` (`idrecepient` ASC) , INDEX `fk_mes1001_prf2_idx` (`idsender` ASC) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , PRIMARY KEY (`id`) , INDEX `fk_mes1001_mes10011_idx` (`extension` ASC) , CONSTRAINT `fk_mes1001_mesgr` FOREIGN KEY (`messagegroup_id` ) REFERENCES `admin_social`.`messagegroup` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1001_prf1` FOREIGN KEY (`idrecepient` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1001_prf2` FOREIGN KEY (`idsender` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1001_mes10011` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`message1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##################################################
#       ORGANIZER
# ##################################################
# CREATE ORGANIZER
CREATE  TABLE IF NOT EXISTS `admin_social`.`organizer1001` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `detatimestart` DATETIME NOT NULL , `datetimefinish` DATETIME NULL , `type` INT NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# ##################################################
#       CONTACTS
# ##################################################
# CREATE CONTACTS
CREATE  TABLE IF NOT EXISTS `admin_social`.`contactgroup1001` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `name` VARCHAR(45) NOT NULL , `countuser` INT UNSIGNED NOT NULL DEFAULT 0 , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokcontactgroupuser1001` (`iduser` INT UNSIGNED NOT NULL , `contactgroup1001_id` INT UNSIGNED NULL , `deleted` TINYINT(1) NOT NULL DEFAULT 0, `state` INT UNSIGNED NOT NULL , INDEX `fk_spcongrusr1001_congr10011_idx` (`contactgroup1001_id` ASC) , INDEX `fk_spcongrusr1001_prf1_idx` (`iduser` ASC) , CONSTRAINT `fk_spcongrusr1001_congr10011` FOREIGN KEY (`contactgroup1001_id` ) REFERENCES `admin_social`.`contactgroup1001` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_spcongrusr1001_prf1` FOREIGN KEY (`iduser` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisoksubscriber1001` (`profile_id` INT UNSIGNED NOT NULL , `deleted` TINYINT(1) NOT NULL , `state` INT UNSIGNED NOT NULL , INDEX `fk_spss1001_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_spss1001_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokblogmetka1001` (`blog1001_id` INT UNSIGNED NOT NULL , `blogmetka_idblogmetka` INT UNSIGNED NOT NULL , INDEX `fk_spblgmtk1001_blg10011_idx` (`blog1001_id` ASC) , INDEX `fk_spblgmtk1001_blgmtk1_idx` (`blogmetka_idblogmetka` ASC) , CONSTRAINT `fk_spblgmtk1001_blg10011` FOREIGN KEY (`blog1001_id` ) REFERENCES `admin_social`.`blog1001` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_spblgmtk1001_blgmtk1` FOREIGN KEY (`blogmetka_idblogmetka` ) REFERENCES `admin_social`.`blogmetka` (`idblogmetka` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;

# ##### 1002 ##########
INSERT INTO `admin_social`.`profile` (`id`, `login`, `password`, `email`, `firstname`, `lastname`, `middlename`, `telephone`,`mobile`,`email2`,`city`,`country`, `birthday`)
VALUES (1002,"2","2","2@mail.ru","русского языка и литературы","Учитель","Анатольевна","+380487168552","+380637584125",null,"Одесса","Украина","1973-09-12");

# ##############################
#          WALL
# #################################
# WALL
CREATE  TABLE IF NOT EXISTS `admin_social`.`wall1002` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `datetime` DATETIME NOT NULL , `idauthor` INT UNSIGNED NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_wll1002_wll10021_idx` (`extension` ASC) , CONSTRAINT `fk_wll1002_wll10021` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`wall1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# WALL COMMENTS
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentwall1002` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `wall1002_id` INT UNSIGNED NOT NULL , `commentwall1002_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comwll1002_wall10021_idx` (`wall1002_id` ASC) , INDEX `fk_comwll1002_comwll10021_idx` (`commentwall1002_id` ASC) , INDEX `fk_comwll1002_prf1_idx` (`profile_id` ASC) , INDEX `fk_comwll1002_comwll10022_idx` (`extension` ASC) , CONSTRAINT `fk_comwll1002_wall10021` FOREIGN KEY (`wall1002_id` ) REFERENCES `admin_social`.`wall1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comwll1002_comwll10021` FOREIGN KEY (`commentwall1002_id` ) REFERENCES `admin_social`.`commentwall1002` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comwll1002_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comwll1002_comwll10022` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentwall1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# LIKE WALL COMMENTS
CREATE TABLE IF NOT EXISTS `admin_social`.`likecommentwall1002` (`commentwall1002_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomwll1002_comwll10021_idx` (`commentwall1002_id` ASC) , INDEX `fk_lkcomwll1002_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomwll1002_comwll10021` FOREIGN KEY (`commentwall1002_id` ) REFERENCES `admin_social`.`commentwall1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomwll1002_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# LIKE WALL
CREATE  TABLE IF NOT EXISTS `admin_social`.`likewall1002` (`wall1002_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkwll1002_wll10021_idx` (`wall1002_id` ASC) , INDEX `fk_lkwll1002_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkwll1002_wll10021` FOREIGN KEY (`wall1002_id` ) REFERENCES `admin_social`.`wall1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkwll1002_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ###############################
#       BLOG
# ################################
# CREATE BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`blog1002` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `extension` INT UNSIGNED NULL , `name` VARCHAR(256) NOT NULL , `source` TEXT NULL , `idauthor` INT UNSIGNED NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_blg1002_blg10021_idx` (`extension` ASC) , CONSTRAINT `fk_blg1002_blg10021` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`blog1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`likeblog1002` (`blog1002_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkblg1002_blg10021_idx` (`blog1002_id` ASC) , INDEX `fk_lkblg1002_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkblg1002_blg10021` FOREIGN KEY (`blog1002_id` ) REFERENCES `admin_social`.`blog1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkblg1002_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentblog1002` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `blog1002_id` INT UNSIGNED NOT NULL , `commentblog1002_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comblg1002_blg10021_idx` (`blog1002_id` ASC) , INDEX `fk_comblg1002_comblg10021_idx` (`commentblog1002_id` ASC) , INDEX `fk_comblg1002_prf1_idx` (`profile_id` ASC) , INDEX `fk_comblg1002_comblg10022_idx` (`extension` ASC) , CONSTRAINT `fk_comblg1002_blg10021` FOREIGN KEY (`blog1002_id` ) REFERENCES `admin_social`.`blog1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comblg1002_comblg10021` FOREIGN KEY (`commentblog1002_id` ) REFERENCES `admin_social`.`commentblog1002` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comblg1002_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comblg1002_comblg10022` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentblog1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE BLOG COMMENT
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentblog1002` (`commentblog1002_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomblg1002_comblg10021_idx` (`commentblog1002_id` ASC) , INDEX `fk_lkcomblg1002_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomblg1002_comblg10021` FOREIGN KEY (`commentblog1002_id` ) REFERENCES `admin_social`.`commentblog1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomblg1002_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ####################################
#       ALBUM
# ####################################
# CREATE ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`album1002` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `name` VARCHAR(150) NOT NULL , `description` VARCHAR(256) NULL , `countphoto` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `coverpagephoto` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# CREATE LIKE ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`likealbum1002` (`album1002_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkalb1002_alb10021_idx` (`album1002_id` ASC) , INDEX `fk_lkalb1002_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkalb1002_alb10021` FOREIGN KEY (`album1002_id` ) REFERENCES `admin_social`.`album1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkalb1002_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentalbum1002` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `album1002_id` INT UNSIGNED NOT NULL , `commentalbum1002_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_commentalbum1002_albumN1_idx` (`album1002_id` ASC) , INDEX `fk_commentalbum1002_ommentalbum10021_idx` (`commentalbum1002_id` ASC) , INDEX `fk_commentalbum1002_profile1_idx` (`profile_id` ASC) , INDEX `fk_commentalbum1002_commentalbum10022_idx` (`extension` ASC) , CONSTRAINT `fk_commentalbum1002_album10021` FOREIGN KEY (`album1002_id` ) REFERENCES `admin_social`.`album1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1002_commentalbum10021` FOREIGN KEY (`commentalbum1002_id` ) REFERENCES `admin_social`.`commentalbum1002` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1002_profile1002` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1002_commentalbum10022` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentalbum1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE COMMENT ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentalbum1002` (`commentalbum1002_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomalb1002_comalb10021_idx` (`commentalbum1002_id` ASC) , INDEX `fk_lkcomalb1002_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomalb1002_comalb10021` FOREIGN KEY (`commentalbum1002_id` ) REFERENCES `admin_social`.`commentalbum1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomalb1002_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##########################################
#       SPISOKALBUMPHOTO
# ##########################################
# CREATE SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokalbumphoto1002` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `date` DATETIME NOT NULL , `album1002_id` INT UNSIGNED NOT NULL , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `name` VARCHAR(256) NULL , `description` VARCHAR(256) NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_spisokalbumphoto1002_album10021_idx` (`album1002_id` ASC) , CONSTRAINT `fk_spisokalbumphoto1002_album10021` FOREIGN KEY (`album1002_id` ) REFERENCES `admin_social`.`album1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`likespisokalbumphoto1002` (`spisokalbumphoto1002_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkssalbpht1002_spalbpht10021_idx` (`spisokalbumphoto1002_id` ASC) , INDEX `fk_lkssalbpht1002_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkssalbpht1002_spalbpht10021` FOREIGN KEY (`spisokalbumphoto1002_id` ) REFERENCES `admin_social`.`spisokalbumphoto1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkssalbpht1002_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentspisokalbumphoto1002` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `spisokalbumphoto1002_id` INT UNSIGNED NOT NULL , `commentspisokalbumphoto1002_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , INDEX `fk_comspalbpht1002_spalbpht10021_idx` (`spisokalbumphoto1002_id` ASC) , INDEX `fk_comspalbpht1002_comspalbpht10021_idx` (`commentspisokalbumphoto1002_id` ASC) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comspalbpht1002_prf1_idx` (`profile_id` ASC) , INDEX `fk_comspalbpht1002_comspalbpht10022_idx` (`extension` ASC) , CONSTRAINT `fk_comspalbpht1002_spalbpht10021` FOREIGN KEY (`spisokalbumphoto1002_id` ) REFERENCES `admin_social`.`spisokalbumphoto1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1002_comspalbpht10021` FOREIGN KEY (`commentspisokalbumphoto1002_id` ) REFERENCES `admin_social`.`commentspisokalbumphoto1002` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1002_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1002_comspalbpht10022` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentspisokalbumphoto1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE COMMENTSPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentspisokalbumphoto1002` (`commentspisokalbumphoto1002_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomspalbpht1002_comspalbpht10021_idx` (`commentspisokalbumphoto1002_id` ASC) , INDEX `fk_lkcomspalbpht1002_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomspalbpht1002_comspalbpht10021` FOREIGN KEY (`commentspisokalbumphoto1002_id` ) REFERENCES `admin_social`.`commentspisokalbumphoto1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomspalbpht1002_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##################################################
#       AVATAR
# ##################################################
# CREATE AVATAR
CREATE  TABLE IF NOT EXISTS `admin_social`.`avatar1002` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `isavatar` TINYINT(1) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `datetime` DATETIME NOT NULL , `prev` INT UNSIGNED NULL ,`update` DATETIME NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# ##################################################
#       MESSAGE
# ##################################################
# CREATE MESSAGE
CREATE  TABLE IF NOT EXISTS `admin_social`.`message1002` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `datetime` DATETIME NOT NULL , `messagegroup_id` INT UNSIGNED NULL , `idrecepient` INT UNSIGNED NULL , `idsender` INT UNSIGNED NULL , `extension` INT UNSIGNED NULL , `new` TINYINT(1) NOT NULL DEFAULT 1 , INDEX `fk_mes1002_mesgr_idx` (`messagegroup_id` ASC) , INDEX `fk_mes1002_prf1_idx` (`idrecepient` ASC) , INDEX `fk_mes1002_prf2_idx` (`idsender` ASC) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , PRIMARY KEY (`id`) , INDEX `fk_mes1002_mes10021_idx` (`extension` ASC) , CONSTRAINT `fk_mes1002_mesgr` FOREIGN KEY (`messagegroup_id` ) REFERENCES `admin_social`.`messagegroup` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1002_prf1` FOREIGN KEY (`idrecepient` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1002_prf2` FOREIGN KEY (`idsender` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1002_mes10021` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`message1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##################################################
#       ORGANIZER
# ##################################################
# CREATE ORGANIZER
CREATE  TABLE IF NOT EXISTS `admin_social`.`organizer1002` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `detatimestart` DATETIME NOT NULL , `datetimefinish` DATETIME NULL , `type` INT NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# ##################################################
#       CONTACTS
# ##################################################
# CREATE CONTACTS
CREATE  TABLE IF NOT EXISTS `admin_social`.`contactgroup1002` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `name` VARCHAR(45) NOT NULL , `countuser` INT UNSIGNED NOT NULL DEFAULT 0 , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokcontactgroupuser1002` (`iduser` INT UNSIGNED NOT NULL , `contactgroup1002_id` INT UNSIGNED NULL , `deleted` TINYINT(1) NOT NULL DEFAULT 0, `state` INT UNSIGNED NOT NULL , INDEX `fk_spcongrusr1002_congr10021_idx` (`contactgroup1002_id` ASC) , INDEX `fk_spcongrusr1002_prf1_idx` (`iduser` ASC) , CONSTRAINT `fk_spcongrusr1002_congr10021` FOREIGN KEY (`contactgroup1002_id` ) REFERENCES `admin_social`.`contactgroup1002` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_spcongrusr1002_prf1` FOREIGN KEY (`iduser` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisoksubscriber1002` (`profile_id` INT UNSIGNED NOT NULL , `deleted` TINYINT(1) NOT NULL , `state` INT UNSIGNED NOT NULL , INDEX `fk_spss1002_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_spss1002_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokblogmetka1002` (`blog1002_id` INT UNSIGNED NOT NULL , `blogmetka_idblogmetka` INT UNSIGNED NOT NULL , INDEX `fk_spblgmtk1002_blg10021_idx` (`blog1002_id` ASC) , INDEX `fk_spblgmtk1002_blgmtk1_idx` (`blogmetka_idblogmetka` ASC) , CONSTRAINT `fk_spblgmtk1002_blg10021` FOREIGN KEY (`blog1002_id` ) REFERENCES `admin_social`.`blog1002` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_spblgmtk1002_blgmtk1` FOREIGN KEY (`blogmetka_idblogmetka` ) REFERENCES `admin_social`.`blogmetka` (`idblogmetka` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;

# ##### 1004 ##########
INSERT INTO `admin_social`.`profile` (`id`, `login`, `password`, `email`, `firstname`, `lastname`, `middlename`, `telephone`,`mobile`,`email2`,`city`,`country`, `birthday`)
VALUES (1004,"3","3","3@mail.ru","математики","Учитель","Альбертовна","+380487168552","+380637584125",null,"Одесса","Украина","1977-09-12");

# ##############################
#          WALL
# #################################
# WALL
CREATE  TABLE IF NOT EXISTS `admin_social`.`wall1004` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `datetime` DATETIME NOT NULL , `idauthor` INT UNSIGNED NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_wll1004_wll10041_idx` (`extension` ASC) , CONSTRAINT `fk_wll1004_wll10041` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`wall1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# WALL COMMENTS
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentwall1004` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `wall1004_id` INT UNSIGNED NOT NULL , `commentwall1004_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comwll1004_wall10041_idx` (`wall1004_id` ASC) , INDEX `fk_comwll1004_comwll10041_idx` (`commentwall1004_id` ASC) , INDEX `fk_comwll1004_prf1_idx` (`profile_id` ASC) , INDEX `fk_comwll1004_comwll10042_idx` (`extension` ASC) , CONSTRAINT `fk_comwll1004_wall10041` FOREIGN KEY (`wall1004_id` ) REFERENCES `admin_social`.`wall1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comwll1004_comwll10041` FOREIGN KEY (`commentwall1004_id` ) REFERENCES `admin_social`.`commentwall1004` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comwll1004_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comwll1004_comwll10042` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentwall1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# LIKE WALL COMMENTS
CREATE TABLE IF NOT EXISTS `admin_social`.`likecommentwall1004` (`commentwall1004_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomwll1004_comwll10041_idx` (`commentwall1004_id` ASC) , INDEX `fk_lkcomwll1004_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomwll1004_comwll10041` FOREIGN KEY (`commentwall1004_id` ) REFERENCES `admin_social`.`commentwall1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomwll1004_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# LIKE WALL
CREATE  TABLE IF NOT EXISTS `admin_social`.`likewall1004` (`wall1004_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkwll1004_wll10041_idx` (`wall1004_id` ASC) , INDEX `fk_lkwll1004_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkwll1004_wll10041` FOREIGN KEY (`wall1004_id` ) REFERENCES `admin_social`.`wall1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkwll1004_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ###############################
#       BLOG
# ################################
# CREATE BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`blog1004` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `extension` INT UNSIGNED NULL , `name` VARCHAR(256) NOT NULL , `source` TEXT NULL , `idauthor` INT UNSIGNED NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_blg1004_blg10041_idx` (`extension` ASC) , CONSTRAINT `fk_blg1004_blg10041` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`blog1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`likeblog1004` (`blog1004_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkblg1004_blg10041_idx` (`blog1004_id` ASC) , INDEX `fk_lkblg1004_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkblg1004_blg10041` FOREIGN KEY (`blog1004_id` ) REFERENCES `admin_social`.`blog1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkblg1004_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentblog1004` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `blog1004_id` INT UNSIGNED NOT NULL , `commentblog1004_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comblg1004_blg10041_idx` (`blog1004_id` ASC) , INDEX `fk_comblg1004_comblg10041_idx` (`commentblog1004_id` ASC) , INDEX `fk_comblg1004_prf1_idx` (`profile_id` ASC) , INDEX `fk_comblg1004_comblg10042_idx` (`extension` ASC) , CONSTRAINT `fk_comblg1004_blg10041` FOREIGN KEY (`blog1004_id` ) REFERENCES `admin_social`.`blog1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comblg1004_comblg10041` FOREIGN KEY (`commentblog1004_id` ) REFERENCES `admin_social`.`commentblog1004` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comblg1004_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comblg1004_comblg10042` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentblog1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE BLOG COMMENT
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentblog1004` (`commentblog1004_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomblg1004_comblg10041_idx` (`commentblog1004_id` ASC) , INDEX `fk_lkcomblg1004_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomblg1004_comblg10041` FOREIGN KEY (`commentblog1004_id` ) REFERENCES `admin_social`.`commentblog1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomblg1004_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ####################################
#       ALBUM
# ####################################
# CREATE ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`album1004` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `name` VARCHAR(150) NOT NULL , `description` VARCHAR(256) NULL , `countphoto` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `coverpagephoto` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# CREATE LIKE ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`likealbum1004` (`album1004_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkalb1004_alb10041_idx` (`album1004_id` ASC) , INDEX `fk_lkalb1004_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkalb1004_alb10041` FOREIGN KEY (`album1004_id` ) REFERENCES `admin_social`.`album1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkalb1004_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentalbum1004` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `album1004_id` INT UNSIGNED NOT NULL , `commentalbum1004_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_commentalbum1004_albumN1_idx` (`album1004_id` ASC) , INDEX `fk_commentalbum1004_ommentalbum10041_idx` (`commentalbum1004_id` ASC) , INDEX `fk_commentalbum1004_profile1_idx` (`profile_id` ASC) , INDEX `fk_commentalbum1004_commentalbum10042_idx` (`extension` ASC) , CONSTRAINT `fk_commentalbum1004_album10041` FOREIGN KEY (`album1004_id` ) REFERENCES `admin_social`.`album1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1004_commentalbum10041` FOREIGN KEY (`commentalbum1004_id` ) REFERENCES `admin_social`.`commentalbum1004` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1004_profile1004` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1004_commentalbum10042` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentalbum1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE COMMENT ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentalbum1004` (`commentalbum1004_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomalb1004_comalb10041_idx` (`commentalbum1004_id` ASC) , INDEX `fk_lkcomalb1004_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomalb1004_comalb10041` FOREIGN KEY (`commentalbum1004_id` ) REFERENCES `admin_social`.`commentalbum1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomalb1004_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##########################################
#       SPISOKALBUMPHOTO
# ##########################################
# CREATE SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokalbumphoto1004` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `date` DATETIME NOT NULL , `album1004_id` INT UNSIGNED NOT NULL , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `name` VARCHAR(256) NULL , `description` VARCHAR(256) NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_spisokalbumphoto1004_album10041_idx` (`album1004_id` ASC) , CONSTRAINT `fk_spisokalbumphoto1004_album10041` FOREIGN KEY (`album1004_id` ) REFERENCES `admin_social`.`album1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`likespisokalbumphoto1004` (`spisokalbumphoto1004_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkssalbpht1004_spalbpht10041_idx` (`spisokalbumphoto1004_id` ASC) , INDEX `fk_lkssalbpht1004_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkssalbpht1004_spalbpht10041` FOREIGN KEY (`spisokalbumphoto1004_id` ) REFERENCES `admin_social`.`spisokalbumphoto1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkssalbpht1004_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentspisokalbumphoto1004` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `spisokalbumphoto1004_id` INT UNSIGNED NOT NULL , `commentspisokalbumphoto1004_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , INDEX `fk_comspalbpht1004_spalbpht10041_idx` (`spisokalbumphoto1004_id` ASC) , INDEX `fk_comspalbpht1004_comspalbpht10041_idx` (`commentspisokalbumphoto1004_id` ASC) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comspalbpht1004_prf1_idx` (`profile_id` ASC) , INDEX `fk_comspalbpht1004_comspalbpht10042_idx` (`extension` ASC) , CONSTRAINT `fk_comspalbpht1004_spalbpht10041` FOREIGN KEY (`spisokalbumphoto1004_id` ) REFERENCES `admin_social`.`spisokalbumphoto1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1004_comspalbpht10041` FOREIGN KEY (`commentspisokalbumphoto1004_id` ) REFERENCES `admin_social`.`commentspisokalbumphoto1004` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1004_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1004_comspalbpht10042` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentspisokalbumphoto1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE COMMENTSPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentspisokalbumphoto1004` (`commentspisokalbumphoto1004_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomspalbpht1004_comspalbpht10041_idx` (`commentspisokalbumphoto1004_id` ASC) , INDEX `fk_lkcomspalbpht1004_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomspalbpht1004_comspalbpht10041` FOREIGN KEY (`commentspisokalbumphoto1004_id` ) REFERENCES `admin_social`.`commentspisokalbumphoto1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomspalbpht1004_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##################################################
#       AVATAR
# ##################################################
# CREATE AVATAR
CREATE  TABLE IF NOT EXISTS `admin_social`.`avatar1004` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `isavatar` TINYINT(1) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `datetime` DATETIME NOT NULL , `prev` INT UNSIGNED NULL ,`update` DATETIME NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# ##################################################
#       MESSAGE
# ##################################################
# CREATE MESSAGE
CREATE  TABLE IF NOT EXISTS `admin_social`.`message1004` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `datetime` DATETIME NOT NULL , `messagegroup_id` INT UNSIGNED NULL , `idrecepient` INT UNSIGNED NULL , `idsender` INT UNSIGNED NULL , `extension` INT UNSIGNED NULL , `new` TINYINT(1) NOT NULL DEFAULT 1 , INDEX `fk_mes1004_mesgr_idx` (`messagegroup_id` ASC) , INDEX `fk_mes1004_prf1_idx` (`idrecepient` ASC) , INDEX `fk_mes1004_prf2_idx` (`idsender` ASC) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , PRIMARY KEY (`id`) , INDEX `fk_mes1004_mes10041_idx` (`extension` ASC) , CONSTRAINT `fk_mes1004_mesgr` FOREIGN KEY (`messagegroup_id` ) REFERENCES `admin_social`.`messagegroup` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1004_prf1` FOREIGN KEY (`idrecepient` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1004_prf2` FOREIGN KEY (`idsender` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1004_mes10041` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`message1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##################################################
#       ORGANIZER
# ##################################################
# CREATE ORGANIZER
CREATE  TABLE IF NOT EXISTS `admin_social`.`organizer1004` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `detatimestart` DATETIME NOT NULL , `datetimefinish` DATETIME NULL , `type` INT NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# ##################################################
#       CONTACTS
# ##################################################
# CREATE CONTACTS
CREATE  TABLE IF NOT EXISTS `admin_social`.`contactgroup1004` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `name` VARCHAR(45) NOT NULL , `countuser` INT UNSIGNED NOT NULL DEFAULT 0 , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokcontactgroupuser1004` (`iduser` INT UNSIGNED NOT NULL , `contactgroup1004_id` INT UNSIGNED NULL , `deleted` TINYINT(1) NOT NULL DEFAULT 0, `state` INT UNSIGNED NOT NULL , INDEX `fk_spcongrusr1004_congr10041_idx` (`contactgroup1004_id` ASC) , INDEX `fk_spcongrusr1004_prf1_idx` (`iduser` ASC) , CONSTRAINT `fk_spcongrusr1004_congr10041` FOREIGN KEY (`contactgroup1004_id` ) REFERENCES `admin_social`.`contactgroup1004` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_spcongrusr1004_prf1` FOREIGN KEY (`iduser` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisoksubscriber1004` (`profile_id` INT UNSIGNED NOT NULL , `deleted` TINYINT(1) NOT NULL , `state` INT UNSIGNED NOT NULL , INDEX `fk_spss1004_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_spss1004_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokblogmetka1004` (`blog1004_id` INT UNSIGNED NOT NULL , `blogmetka_idblogmetka` INT UNSIGNED NOT NULL , INDEX `fk_spblgmtk1004_blg10041_idx` (`blog1004_id` ASC) , INDEX `fk_spblgmtk1004_blgmtk1_idx` (`blogmetka_idblogmetka` ASC) , CONSTRAINT `fk_spblgmtk1004_blg10041` FOREIGN KEY (`blog1004_id` ) REFERENCES `admin_social`.`blog1004` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_spblgmtk1004_blgmtk1` FOREIGN KEY (`blogmetka_idblogmetka` ) REFERENCES `admin_social`.`blogmetka` (`idblogmetka` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;

# ##### 1008 ##########
INSERT INTO `admin_social`.`profile` (`id`, `login`, `password`, `email`, `firstname`, `lastname`, `middlename`, `telephone`,`mobile`,`email2`,`city`,`country`, `birthday`)
VALUES (1008,"vas","vas","4@mail.ru","Роман","Васильев","Романович","+380487168552","+380637584125",null,"Одесса","Украина","1993-09-12");

# ##############################
#          WALL
# #################################
# WALL
CREATE  TABLE IF NOT EXISTS `admin_social`.`wall1008` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `datetime` DATETIME NOT NULL , `idauthor` INT UNSIGNED NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_wll1008_wll10081_idx` (`extension` ASC) , CONSTRAINT `fk_wll1008_wll10081` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`wall1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# WALL COMMENTS
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentwall1008` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `wall1008_id` INT UNSIGNED NOT NULL , `commentwall1008_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comwll1008_wall10081_idx` (`wall1008_id` ASC) , INDEX `fk_comwll1008_comwll10081_idx` (`commentwall1008_id` ASC) , INDEX `fk_comwll1008_prf1_idx` (`profile_id` ASC) , INDEX `fk_comwll1008_comwll10082_idx` (`extension` ASC) , CONSTRAINT `fk_comwll1008_wall10081` FOREIGN KEY (`wall1008_id` ) REFERENCES `admin_social`.`wall1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comwll1008_comwll10081` FOREIGN KEY (`commentwall1008_id` ) REFERENCES `admin_social`.`commentwall1008` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comwll1008_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comwll1008_comwll10082` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentwall1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# LIKE WALL COMMENTS
CREATE TABLE IF NOT EXISTS `admin_social`.`likecommentwall1008` (`commentwall1008_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomwll1008_comwll10081_idx` (`commentwall1008_id` ASC) , INDEX `fk_lkcomwll1008_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomwll1008_comwll10081` FOREIGN KEY (`commentwall1008_id` ) REFERENCES `admin_social`.`commentwall1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomwll1008_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# LIKE WALL
CREATE  TABLE IF NOT EXISTS `admin_social`.`likewall1008` (`wall1008_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkwll1008_wll10081_idx` (`wall1008_id` ASC) , INDEX `fk_lkwll1008_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkwll1008_wll10081` FOREIGN KEY (`wall1008_id` ) REFERENCES `admin_social`.`wall1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkwll1008_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ###############################
#       BLOG
# ################################
# CREATE BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`blog1008` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `extension` INT UNSIGNED NULL , `name` VARCHAR(256) NOT NULL , `source` TEXT NULL , `idauthor` INT UNSIGNED NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_blg1008_blg10081_idx` (`extension` ASC) , CONSTRAINT `fk_blg1008_blg10081` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`blog1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`likeblog1008` (`blog1008_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkblg1008_blg10081_idx` (`blog1008_id` ASC) , INDEX `fk_lkblg1008_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkblg1008_blg10081` FOREIGN KEY (`blog1008_id` ) REFERENCES `admin_social`.`blog1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkblg1008_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentblog1008` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `blog1008_id` INT UNSIGNED NOT NULL , `commentblog1008_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comblg1008_blg10081_idx` (`blog1008_id` ASC) , INDEX `fk_comblg1008_comblg10081_idx` (`commentblog1008_id` ASC) , INDEX `fk_comblg1008_prf1_idx` (`profile_id` ASC) , INDEX `fk_comblg1008_comblg10082_idx` (`extension` ASC) , CONSTRAINT `fk_comblg1008_blg10081` FOREIGN KEY (`blog1008_id` ) REFERENCES `admin_social`.`blog1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comblg1008_comblg10081` FOREIGN KEY (`commentblog1008_id` ) REFERENCES `admin_social`.`commentblog1008` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comblg1008_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comblg1008_comblg10082` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentblog1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE BLOG COMMENT
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentblog1008` (`commentblog1008_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomblg1008_comblg10081_idx` (`commentblog1008_id` ASC) , INDEX `fk_lkcomblg1008_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomblg1008_comblg10081` FOREIGN KEY (`commentblog1008_id` ) REFERENCES `admin_social`.`commentblog1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomblg1008_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ####################################
#       ALBUM
# ####################################
# CREATE ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`album1008` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `name` VARCHAR(150) NOT NULL , `description` VARCHAR(256) NULL , `countphoto` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `coverpagephoto` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# CREATE LIKE ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`likealbum1008` (`album1008_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkalb1008_alb10081_idx` (`album1008_id` ASC) , INDEX `fk_lkalb1008_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkalb1008_alb10081` FOREIGN KEY (`album1008_id` ) REFERENCES `admin_social`.`album1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkalb1008_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentalbum1008` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `album1008_id` INT UNSIGNED NOT NULL , `commentalbum1008_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_commentalbum1008_albumN1_idx` (`album1008_id` ASC) , INDEX `fk_commentalbum1008_ommentalbum10081_idx` (`commentalbum1008_id` ASC) , INDEX `fk_commentalbum1008_profile1_idx` (`profile_id` ASC) , INDEX `fk_commentalbum1008_commentalbum10082_idx` (`extension` ASC) , CONSTRAINT `fk_commentalbum1008_album10081` FOREIGN KEY (`album1008_id` ) REFERENCES `admin_social`.`album1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1008_commentalbum10081` FOREIGN KEY (`commentalbum1008_id` ) REFERENCES `admin_social`.`commentalbum1008` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1008_profile1008` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1008_commentalbum10082` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentalbum1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE COMMENT ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentalbum1008` (`commentalbum1008_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomalb1008_comalb10081_idx` (`commentalbum1008_id` ASC) , INDEX `fk_lkcomalb1008_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomalb1008_comalb10081` FOREIGN KEY (`commentalbum1008_id` ) REFERENCES `admin_social`.`commentalbum1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomalb1008_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##########################################
#       SPISOKALBUMPHOTO
# ##########################################
# CREATE SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokalbumphoto1008` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `date` DATETIME NOT NULL , `album1008_id` INT UNSIGNED NOT NULL , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `name` VARCHAR(256) NULL , `description` VARCHAR(256) NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_spisokalbumphoto1008_album10081_idx` (`album1008_id` ASC) , CONSTRAINT `fk_spisokalbumphoto1008_album10081` FOREIGN KEY (`album1008_id` ) REFERENCES `admin_social`.`album1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`likespisokalbumphoto1008` (`spisokalbumphoto1008_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkssalbpht1008_spalbpht10081_idx` (`spisokalbumphoto1008_id` ASC) , INDEX `fk_lkssalbpht1008_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkssalbpht1008_spalbpht10081` FOREIGN KEY (`spisokalbumphoto1008_id` ) REFERENCES `admin_social`.`spisokalbumphoto1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkssalbpht1008_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentspisokalbumphoto1008` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `spisokalbumphoto1008_id` INT UNSIGNED NOT NULL , `commentspisokalbumphoto1008_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , INDEX `fk_comspalbpht1008_spalbpht10081_idx` (`spisokalbumphoto1008_id` ASC) , INDEX `fk_comspalbpht1008_comspalbpht10081_idx` (`commentspisokalbumphoto1008_id` ASC) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comspalbpht1008_prf1_idx` (`profile_id` ASC) , INDEX `fk_comspalbpht1008_comspalbpht10082_idx` (`extension` ASC) , CONSTRAINT `fk_comspalbpht1008_spalbpht10081` FOREIGN KEY (`spisokalbumphoto1008_id` ) REFERENCES `admin_social`.`spisokalbumphoto1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1008_comspalbpht10081` FOREIGN KEY (`commentspisokalbumphoto1008_id` ) REFERENCES `admin_social`.`commentspisokalbumphoto1008` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1008_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1008_comspalbpht10082` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentspisokalbumphoto1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE COMMENTSPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentspisokalbumphoto1008` (`commentspisokalbumphoto1008_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomspalbpht1008_comspalbpht10081_idx` (`commentspisokalbumphoto1008_id` ASC) , INDEX `fk_lkcomspalbpht1008_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomspalbpht1008_comspalbpht10081` FOREIGN KEY (`commentspisokalbumphoto1008_id` ) REFERENCES `admin_social`.`commentspisokalbumphoto1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomspalbpht1008_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##################################################
#       AVATAR
# ##################################################
# CREATE AVATAR
CREATE  TABLE IF NOT EXISTS `admin_social`.`avatar1008` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `isavatar` TINYINT(1) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `datetime` DATETIME NOT NULL , `prev` INT UNSIGNED NULL ,`update` DATETIME NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# ##################################################
#       MESSAGE
# ##################################################
# CREATE MESSAGE
CREATE  TABLE IF NOT EXISTS `admin_social`.`message1008` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `datetime` DATETIME NOT NULL , `messagegroup_id` INT UNSIGNED NULL , `idrecepient` INT UNSIGNED NULL , `idsender` INT UNSIGNED NULL , `extension` INT UNSIGNED NULL , `new` TINYINT(1) NOT NULL DEFAULT 1 , INDEX `fk_mes1008_mesgr_idx` (`messagegroup_id` ASC) , INDEX `fk_mes1008_prf1_idx` (`idrecepient` ASC) , INDEX `fk_mes1008_prf2_idx` (`idsender` ASC) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , PRIMARY KEY (`id`) , INDEX `fk_mes1008_mes10081_idx` (`extension` ASC) , CONSTRAINT `fk_mes1008_mesgr` FOREIGN KEY (`messagegroup_id` ) REFERENCES `admin_social`.`messagegroup` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1008_prf1` FOREIGN KEY (`idrecepient` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1008_prf2` FOREIGN KEY (`idsender` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1008_mes10081` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`message1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##################################################
#       ORGANIZER
# ##################################################
# CREATE ORGANIZER
CREATE  TABLE IF NOT EXISTS `admin_social`.`organizer1008` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `detatimestart` DATETIME NOT NULL , `datetimefinish` DATETIME NULL , `type` INT NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# ##################################################
#       CONTACTS
# ##################################################
# CREATE CONTACTS
CREATE  TABLE IF NOT EXISTS `admin_social`.`contactgroup1008` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `name` VARCHAR(45) NOT NULL , `countuser` INT UNSIGNED NOT NULL DEFAULT 0 , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokcontactgroupuser1008` (`iduser` INT UNSIGNED NOT NULL , `contactgroup1008_id` INT UNSIGNED NULL , `deleted` TINYINT(1) NOT NULL DEFAULT 0, `state` INT UNSIGNED NOT NULL , INDEX `fk_spcongrusr1008_congr10081_idx` (`contactgroup1008_id` ASC) , INDEX `fk_spcongrusr1008_prf1_idx` (`iduser` ASC) , CONSTRAINT `fk_spcongrusr1008_congr10081` FOREIGN KEY (`contactgroup1008_id` ) REFERENCES `admin_social`.`contactgroup1008` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_spcongrusr1008_prf1` FOREIGN KEY (`iduser` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisoksubscriber1008` (`profile_id` INT UNSIGNED NOT NULL , `deleted` TINYINT(1) NOT NULL , `state` INT UNSIGNED NOT NULL , INDEX `fk_spss1008_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_spss1008_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokblogmetka1008` (`blog1008_id` INT UNSIGNED NOT NULL , `blogmetka_idblogmetka` INT UNSIGNED NOT NULL , INDEX `fk_spblgmtk1008_blg10081_idx` (`blog1008_id` ASC) , INDEX `fk_spblgmtk1008_blgmtk1_idx` (`blogmetka_idblogmetka` ASC) , CONSTRAINT `fk_spblgmtk1008_blg10081` FOREIGN KEY (`blog1008_id` ) REFERENCES `admin_social`.`blog1008` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_spblgmtk1008_blgmtk1` FOREIGN KEY (`blogmetka_idblogmetka` ) REFERENCES `admin_social`.`blogmetka` (`idblogmetka` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;

# ##### 1009 ##########
INSERT INTO `admin_social`.`profile` (`id`, `login`, `password`, `email`, `firstname`, `lastname`, `middlename`, `telephone`,`mobile`,`email2`,`city`,`country`, `birthday`)
VALUES (1009,"sano","sano","9@mail.ru","Аратовский","Александр","Сергеевич","+380487168552","+380633767526",null,"Одесса","Украина","1993-02-01");

# ##############################
#          WALL
# #################################
# WALL
CREATE  TABLE IF NOT EXISTS `admin_social`.`wall1009` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `datetime` DATETIME NOT NULL , `idauthor` INT UNSIGNED NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_wll1009_wll10091_idx` (`extension` ASC) , CONSTRAINT `fk_wll1009_wll10091` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`wall1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# WALL COMMENTS
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentwall1009` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `wall1009_id` INT UNSIGNED NOT NULL , `commentwall1009_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comwll1009_wall10091_idx` (`wall1009_id` ASC) , INDEX `fk_comwll1009_comwll10091_idx` (`commentwall1009_id` ASC) , INDEX `fk_comwll1009_prf1_idx` (`profile_id` ASC) , INDEX `fk_comwll1009_comwll10092_idx` (`extension` ASC) , CONSTRAINT `fk_comwll1009_wall10091` FOREIGN KEY (`wall1009_id` ) REFERENCES `admin_social`.`wall1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comwll1009_comwll10091` FOREIGN KEY (`commentwall1009_id` ) REFERENCES `admin_social`.`commentwall1009` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comwll1009_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comwll1009_comwll10092` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentwall1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# LIKE WALL COMMENTS
CREATE TABLE IF NOT EXISTS `admin_social`.`likecommentwall1009` (`commentwall1009_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomwll1009_comwll10091_idx` (`commentwall1009_id` ASC) , INDEX `fk_lkcomwll1009_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomwll1009_comwll10091` FOREIGN KEY (`commentwall1009_id` ) REFERENCES `admin_social`.`commentwall1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomwll1009_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# LIKE WALL
CREATE  TABLE IF NOT EXISTS `admin_social`.`likewall1009` (`wall1009_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkwll1009_wll10091_idx` (`wall1009_id` ASC) , INDEX `fk_lkwll1009_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkwll1009_wll10091` FOREIGN KEY (`wall1009_id` ) REFERENCES `admin_social`.`wall1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkwll1009_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ###############################
#       BLOG
# ################################
# CREATE BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`blog1009` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `extension` INT UNSIGNED NULL , `name` VARCHAR(256) NOT NULL , `source` TEXT NULL , `idauthor` INT UNSIGNED NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_blg1009_blg10091_idx` (`extension` ASC) , CONSTRAINT `fk_blg1009_blg10091` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`blog1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`likeblog1009` (`blog1009_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkblg1009_blg10091_idx` (`blog1009_id` ASC) , INDEX `fk_lkblg1009_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkblg1009_blg10091` FOREIGN KEY (`blog1009_id` ) REFERENCES `admin_social`.`blog1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkblg1009_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentblog1009` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `blog1009_id` INT UNSIGNED NOT NULL , `commentblog1009_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comblg1009_blg10091_idx` (`blog1009_id` ASC) , INDEX `fk_comblg1009_comblg10091_idx` (`commentblog1009_id` ASC) , INDEX `fk_comblg1009_prf1_idx` (`profile_id` ASC) , INDEX `fk_comblg1009_comblg10092_idx` (`extension` ASC) , CONSTRAINT `fk_comblg1009_blg10091` FOREIGN KEY (`blog1009_id` ) REFERENCES `admin_social`.`blog1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comblg1009_comblg10091` FOREIGN KEY (`commentblog1009_id` ) REFERENCES `admin_social`.`commentblog1009` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comblg1009_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comblg1009_comblg10092` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentblog1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE BLOG COMMENT
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentblog1009` (`commentblog1009_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomblg1009_comblg10091_idx` (`commentblog1009_id` ASC) , INDEX `fk_lkcomblg1009_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomblg1009_comblg10091` FOREIGN KEY (`commentblog1009_id` ) REFERENCES `admin_social`.`commentblog1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomblg1009_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ####################################
#       ALBUM
# ####################################
# CREATE ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`album1009` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `name` VARCHAR(150) NOT NULL , `description` VARCHAR(256) NULL , `countphoto` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `coverpagephoto` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# CREATE LIKE ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`likealbum1009` (`album1009_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkalb1009_alb10091_idx` (`album1009_id` ASC) , INDEX `fk_lkalb1009_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkalb1009_alb10091` FOREIGN KEY (`album1009_id` ) REFERENCES `admin_social`.`album1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkalb1009_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentalbum1009` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `album1009_id` INT UNSIGNED NOT NULL , `commentalbum1009_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_commentalbum1009_albumN1_idx` (`album1009_id` ASC) , INDEX `fk_commentalbum1009_ommentalbum10091_idx` (`commentalbum1009_id` ASC) , INDEX `fk_commentalbum1009_profile1_idx` (`profile_id` ASC) , INDEX `fk_commentalbum1009_commentalbum10092_idx` (`extension` ASC) , CONSTRAINT `fk_commentalbum1009_album10091` FOREIGN KEY (`album1009_id` ) REFERENCES `admin_social`.`album1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1009_commentalbum10091` FOREIGN KEY (`commentalbum1009_id` ) REFERENCES `admin_social`.`commentalbum1009` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1009_profile1009` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1009_commentalbum10092` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentalbum1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE COMMENT ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentalbum1009` (`commentalbum1009_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomalb1009_comalb10091_idx` (`commentalbum1009_id` ASC) , INDEX `fk_lkcomalb1009_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomalb1009_comalb10091` FOREIGN KEY (`commentalbum1009_id` ) REFERENCES `admin_social`.`commentalbum1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomalb1009_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##########################################
#       SPISOKALBUMPHOTO
# ##########################################
# CREATE SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokalbumphoto1009` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `date` DATETIME NOT NULL , `album1009_id` INT UNSIGNED NOT NULL , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `name` VARCHAR(256) NULL , `description` VARCHAR(256) NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_spisokalbumphoto1009_album10091_idx` (`album1009_id` ASC) , CONSTRAINT `fk_spisokalbumphoto1009_album10091` FOREIGN KEY (`album1009_id` ) REFERENCES `admin_social`.`album1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`likespisokalbumphoto1009` (`spisokalbumphoto1009_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkssalbpht1009_spalbpht10091_idx` (`spisokalbumphoto1009_id` ASC) , INDEX `fk_lkssalbpht1009_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkssalbpht1009_spalbpht10091` FOREIGN KEY (`spisokalbumphoto1009_id` ) REFERENCES `admin_social`.`spisokalbumphoto1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkssalbpht1009_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentspisokalbumphoto1009` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `spisokalbumphoto1009_id` INT UNSIGNED NOT NULL , `commentspisokalbumphoto1009_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , INDEX `fk_comspalbpht1009_spalbpht10091_idx` (`spisokalbumphoto1009_id` ASC) , INDEX `fk_comspalbpht1009_comspalbpht10091_idx` (`commentspisokalbumphoto1009_id` ASC) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comspalbpht1009_prf1_idx` (`profile_id` ASC) , INDEX `fk_comspalbpht1009_comspalbpht10092_idx` (`extension` ASC) , CONSTRAINT `fk_comspalbpht1009_spalbpht10091` FOREIGN KEY (`spisokalbumphoto1009_id` ) REFERENCES `admin_social`.`spisokalbumphoto1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1009_comspalbpht10091` FOREIGN KEY (`commentspisokalbumphoto1009_id` ) REFERENCES `admin_social`.`commentspisokalbumphoto1009` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1009_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1009_comspalbpht10092` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentspisokalbumphoto1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE COMMENTSPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentspisokalbumphoto1009` (`commentspisokalbumphoto1009_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomspalbpht1009_comspalbpht10091_idx` (`commentspisokalbumphoto1009_id` ASC) , INDEX `fk_lkcomspalbpht1009_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomspalbpht1009_comspalbpht10091` FOREIGN KEY (`commentspisokalbumphoto1009_id` ) REFERENCES `admin_social`.`commentspisokalbumphoto1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomspalbpht1009_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##################################################
#       AVATAR
# ##################################################
# CREATE AVATAR
CREATE  TABLE IF NOT EXISTS `admin_social`.`avatar1009` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `isavatar` TINYINT(1) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `datetime` DATETIME NOT NULL , `prev` INT UNSIGNED NULL ,`update` DATETIME NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# ##################################################
#       MESSAGE
# ##################################################
# CREATE MESSAGE
CREATE  TABLE IF NOT EXISTS `admin_social`.`message1009` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `datetime` DATETIME NOT NULL , `messagegroup_id` INT UNSIGNED NULL , `idrecepient` INT UNSIGNED NULL , `idsender` INT UNSIGNED NULL , `extension` INT UNSIGNED NULL , `new` TINYINT(1) NOT NULL DEFAULT 1 , INDEX `fk_mes1009_mesgr_idx` (`messagegroup_id` ASC) , INDEX `fk_mes1009_prf1_idx` (`idrecepient` ASC) , INDEX `fk_mes1009_prf2_idx` (`idsender` ASC) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , PRIMARY KEY (`id`) , INDEX `fk_mes1009_mes10091_idx` (`extension` ASC) , CONSTRAINT `fk_mes1009_mesgr` FOREIGN KEY (`messagegroup_id` ) REFERENCES `admin_social`.`messagegroup` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1009_prf1` FOREIGN KEY (`idrecepient` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1009_prf2` FOREIGN KEY (`idsender` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1009_mes10091` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`message1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##################################################
#       ORGANIZER
# ##################################################
# CREATE ORGANIZER
CREATE  TABLE IF NOT EXISTS `admin_social`.`organizer1009` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `detatimestart` DATETIME NOT NULL , `datetimefinish` DATETIME NULL , `type` INT NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# ##################################################
#       CONTACTS
# ##################################################
# CREATE CONTACTS
CREATE  TABLE IF NOT EXISTS `admin_social`.`contactgroup1009` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `name` VARCHAR(45) NOT NULL , `countuser` INT UNSIGNED NOT NULL DEFAULT 0 , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokcontactgroupuser1009` (`iduser` INT UNSIGNED NOT NULL , `contactgroup1009_id` INT UNSIGNED NULL , `deleted` TINYINT(1) NOT NULL DEFAULT 0, `state` INT UNSIGNED NOT NULL , INDEX `fk_spcongrusr1009_congr10091_idx` (`contactgroup1009_id` ASC) , INDEX `fk_spcongrusr1009_prf1_idx` (`iduser` ASC) , CONSTRAINT `fk_spcongrusr1009_congr10091` FOREIGN KEY (`contactgroup1009_id` ) REFERENCES `admin_social`.`contactgroup1009` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_spcongrusr1009_prf1` FOREIGN KEY (`iduser` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisoksubscriber1009` (`profile_id` INT UNSIGNED NOT NULL , `deleted` TINYINT(1) NOT NULL , `state` INT UNSIGNED NOT NULL , INDEX `fk_spss1009_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_spss1009_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokblogmetka1009` (`blog1009_id` INT UNSIGNED NOT NULL , `blogmetka_idblogmetka` INT UNSIGNED NOT NULL , INDEX `fk_spblgmtk1009_blg10091_idx` (`blog1009_id` ASC) , INDEX `fk_spblgmtk1009_blgmtk1_idx` (`blogmetka_idblogmetka` ASC) , CONSTRAINT `fk_spblgmtk1009_blg10091` FOREIGN KEY (`blog1009_id` ) REFERENCES `admin_social`.`blog1009` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_spblgmtk1009_blgmtk1` FOREIGN KEY (`blogmetka_idblogmetka` ) REFERENCES `admin_social`.`blogmetka` (`idblogmetka` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;

# ##### 1010 ##########
INSERT INTO `admin_social`.`profile` (`id`, `login`, `password`, `email`, `firstname`, `lastname`, `middlename`, `telephone`,`mobile`,`email2`,`city`,`country`, `birthday`)
VALUES (1010,"oleg","oleg","7@mail.ru","Олег","Скалозуб","Анатольевич","+380487168552","+380633767526",null,"Одесса","Украина","1993-02-01");

# ##############################
#          WALL
# #################################
# WALL
CREATE  TABLE IF NOT EXISTS `admin_social`.`wall1010` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `datetime` DATETIME NOT NULL , `idauthor` INT UNSIGNED NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_wll1010_wll10101_idx` (`extension` ASC) , CONSTRAINT `fk_wll1010_wll10101` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`wall1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# WALL COMMENTS
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentwall1010` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `wall1010_id` INT UNSIGNED NOT NULL , `commentwall1010_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comwll1010_wall10101_idx` (`wall1010_id` ASC) , INDEX `fk_comwll1010_comwll10101_idx` (`commentwall1010_id` ASC) , INDEX `fk_comwll1010_prf1_idx` (`profile_id` ASC) , INDEX `fk_comwll1010_comwll10102_idx` (`extension` ASC) , CONSTRAINT `fk_comwll1010_wall10101` FOREIGN KEY (`wall1010_id` ) REFERENCES `admin_social`.`wall1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comwll1010_comwll10101` FOREIGN KEY (`commentwall1010_id` ) REFERENCES `admin_social`.`commentwall1010` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comwll1010_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comwll1010_comwll10102` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentwall1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# LIKE WALL COMMENTS
CREATE TABLE IF NOT EXISTS `admin_social`.`likecommentwall1010` (`commentwall1010_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomwll1010_comwll10101_idx` (`commentwall1010_id` ASC) , INDEX `fk_lkcomwll1010_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomwll1010_comwll10101` FOREIGN KEY (`commentwall1010_id` ) REFERENCES `admin_social`.`commentwall1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomwll1010_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# LIKE WALL
CREATE  TABLE IF NOT EXISTS `admin_social`.`likewall1010` (`wall1010_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkwll1010_wll10101_idx` (`wall1010_id` ASC) , INDEX `fk_lkwll1010_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkwll1010_wll10101` FOREIGN KEY (`wall1010_id` ) REFERENCES `admin_social`.`wall1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkwll1010_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ###############################
#       BLOG
# ################################
# CREATE BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`blog1010` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `extension` INT UNSIGNED NULL , `name` VARCHAR(256) NOT NULL , `source` TEXT NULL , `idauthor` INT UNSIGNED NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_blg1010_blg10101_idx` (`extension` ASC) , CONSTRAINT `fk_blg1010_blg10101` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`blog1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`likeblog1010` (`blog1010_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkblg1010_blg10101_idx` (`blog1010_id` ASC) , INDEX `fk_lkblg1010_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkblg1010_blg10101` FOREIGN KEY (`blog1010_id` ) REFERENCES `admin_social`.`blog1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkblg1010_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT BLOG
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentblog1010` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `blog1010_id` INT UNSIGNED NOT NULL , `commentblog1010_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comblg1010_blg10101_idx` (`blog1010_id` ASC) , INDEX `fk_comblg1010_comblg10101_idx` (`commentblog1010_id` ASC) , INDEX `fk_comblg1010_prf1_idx` (`profile_id` ASC) , INDEX `fk_comblg1010_comblg10102_idx` (`extension` ASC) , CONSTRAINT `fk_comblg1010_blg10101` FOREIGN KEY (`blog1010_id` ) REFERENCES `admin_social`.`blog1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comblg1010_comblg10101` FOREIGN KEY (`commentblog1010_id` ) REFERENCES `admin_social`.`commentblog1010` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comblg1010_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comblg1010_comblg10102` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentblog1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE BLOG COMMENT
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentblog1010` (`commentblog1010_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomblg1010_comblg10101_idx` (`commentblog1010_id` ASC) , INDEX `fk_lkcomblg1010_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomblg1010_comblg10101` FOREIGN KEY (`commentblog1010_id` ) REFERENCES `admin_social`.`commentblog1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomblg1010_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ####################################
#       ALBUM
# ####################################
# CREATE ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`album1010` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `name` VARCHAR(150) NOT NULL , `description` VARCHAR(256) NULL , `countphoto` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `coverpagephoto` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# CREATE LIKE ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`likealbum1010` (`album1010_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkalb1010_alb10101_idx` (`album1010_id` ASC) , INDEX `fk_lkalb1010_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkalb1010_alb10101` FOREIGN KEY (`album1010_id` ) REFERENCES `admin_social`.`album1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkalb1010_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentalbum1010` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `album1010_id` INT UNSIGNED NOT NULL , `commentalbum1010_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_commentalbum1010_albumN1_idx` (`album1010_id` ASC) , INDEX `fk_commentalbum1010_ommentalbum10101_idx` (`commentalbum1010_id` ASC) , INDEX `fk_commentalbum1010_profile1_idx` (`profile_id` ASC) , INDEX `fk_commentalbum1010_commentalbum10102_idx` (`extension` ASC) , CONSTRAINT `fk_commentalbum1010_album10101` FOREIGN KEY (`album1010_id` ) REFERENCES `admin_social`.`album1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1010_commentalbum10101` FOREIGN KEY (`commentalbum1010_id` ) REFERENCES `admin_social`.`commentalbum1010` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1010_profile1010` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_commentalbum1010_commentalbum10102` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentalbum1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE COMMENT ALBUM
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentalbum1010` (`commentalbum1010_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomalb1010_comalb10101_idx` (`commentalbum1010_id` ASC) , INDEX `fk_lkcomalb1010_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomalb1010_comalb10101` FOREIGN KEY (`commentalbum1010_id` ) REFERENCES `admin_social`.`commentalbum1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomalb1010_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##########################################
#       SPISOKALBUMPHOTO
# ##########################################
# CREATE SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokalbumphoto1010` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `date` DATETIME NOT NULL , `album1010_id` INT UNSIGNED NOT NULL , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `name` VARCHAR(256) NULL , `description` VARCHAR(256) NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_spisokalbumphoto1010_album10101_idx` (`album1010_id` ASC) , CONSTRAINT `fk_spisokalbumphoto1010_album10101` FOREIGN KEY (`album1010_id` ) REFERENCES `admin_social`.`album1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`likespisokalbumphoto1010` (`spisokalbumphoto1010_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkssalbpht1010_spalbpht10101_idx` (`spisokalbumphoto1010_id` ASC) , INDEX `fk_lkssalbpht1010_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkssalbpht1010_spalbpht10101` FOREIGN KEY (`spisokalbumphoto1010_id` ) REFERENCES `admin_social`.`spisokalbumphoto1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkssalbpht1010_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE COMMENT SPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`commentspisokalbumphoto1010` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `datetime` DATETIME NOT NULL , `text` VARCHAR(256) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `spisokalbumphoto1010_id` INT UNSIGNED NOT NULL , `commentspisokalbumphoto1010_id` INT UNSIGNED NULL , `profile_id` INT UNSIGNED NOT NULL , `extension` INT UNSIGNED NULL , PRIMARY KEY (`id`) , INDEX `fk_comspalbpht1010_spalbpht10101_idx` (`spisokalbumphoto1010_id` ASC) , INDEX `fk_comspalbpht1010_comspalbpht10101_idx` (`commentspisokalbumphoto1010_id` ASC) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , INDEX `fk_comspalbpht1010_prf1_idx` (`profile_id` ASC) , INDEX `fk_comspalbpht1010_comspalbpht10102_idx` (`extension` ASC) , CONSTRAINT `fk_comspalbpht1010_spalbpht10101` FOREIGN KEY (`spisokalbumphoto1010_id` ) REFERENCES `admin_social`.`spisokalbumphoto1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1010_comspalbpht10101` FOREIGN KEY (`commentspisokalbumphoto1010_id` ) REFERENCES `admin_social`.`commentspisokalbumphoto1010` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1010_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_comspalbpht1010_comspalbpht10102` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`commentspisokalbumphoto1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# CREATE LIKE COMMENTSPISOKALBUMPHOTO
CREATE  TABLE IF NOT EXISTS `admin_social`.`likecommentspisokalbumphoto1010` (`commentspisokalbumphoto1010_id` INT UNSIGNED NOT NULL , `profile_id` INT UNSIGNED NOT NULL , INDEX `fk_lkcomspalbpht1010_comspalbpht10101_idx` (`commentspisokalbumphoto1010_id` ASC) , INDEX `fk_lkcomspalbpht1010_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_lkcomspalbpht1010_comspalbpht10101` FOREIGN KEY (`commentspisokalbumphoto1010_id` ) REFERENCES `admin_social`.`commentspisokalbumphoto1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_lkcomspalbpht1010_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##################################################
#       AVATAR
# ##################################################
# CREATE AVATAR
CREATE  TABLE IF NOT EXISTS `admin_social`.`avatar1010` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `isavatar` TINYINT(1) NOT NULL , `countlike` INT UNSIGNED NOT NULL DEFAULT 0 , `countcomment` INT UNSIGNED NOT NULL DEFAULT 0 , `datetime` DATETIME NOT NULL , `prev` INT UNSIGNED NULL ,`update` DATETIME NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# ##################################################
#       MESSAGE
# ##################################################
# CREATE MESSAGE
CREATE  TABLE IF NOT EXISTS `admin_social`.`message1010` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `datetime` DATETIME NOT NULL , `messagegroup_id` INT UNSIGNED NULL , `idrecepient` INT UNSIGNED NULL , `idsender` INT UNSIGNED NULL , `extension` INT UNSIGNED NULL , `new` TINYINT(1) NOT NULL DEFAULT 1 , INDEX `fk_mes1010_mesgr_idx` (`messagegroup_id` ASC) , INDEX `fk_mes1010_prf1_idx` (`idrecepient` ASC) , INDEX `fk_mes1010_prf2_idx` (`idsender` ASC) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) , PRIMARY KEY (`id`) , INDEX `fk_mes1010_mes10101_idx` (`extension` ASC) , CONSTRAINT `fk_mes1010_mesgr` FOREIGN KEY (`messagegroup_id` ) REFERENCES `admin_social`.`messagegroup` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1010_prf1` FOREIGN KEY (`idrecepient` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1010_prf2` FOREIGN KEY (`idsender` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_mes1010_mes10101` FOREIGN KEY (`extension` ) REFERENCES `admin_social`.`message1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
# ##################################################
#       ORGANIZER
# ##################################################
# CREATE ORGANIZER
CREATE  TABLE IF NOT EXISTS `admin_social`.`organizer1010` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `text` VARCHAR(256) NOT NULL , `detatimestart` DATETIME NOT NULL , `datetimefinish` DATETIME NULL , `type` INT NOT NULL , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
# ##################################################
#       CONTACTS
# ##################################################
# CREATE CONTACTS
CREATE  TABLE IF NOT EXISTS `admin_social`.`contactgroup1010` (`id` INT UNSIGNED NOT NULL AUTO_INCREMENT , `name` VARCHAR(45) NOT NULL , `countuser` INT UNSIGNED NOT NULL DEFAULT 0 , PRIMARY KEY (`id`) , UNIQUE INDEX `id_UNIQUE` (`id` ASC) ) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokcontactgroupuser1010` (`iduser` INT UNSIGNED NOT NULL , `contactgroup1010_id` INT UNSIGNED NULL , `deleted` TINYINT(1) NOT NULL DEFAULT 0, `state` INT UNSIGNED NOT NULL , INDEX `fk_spcongrusr1010_congr10101_idx` (`contactgroup1010_id` ASC) , INDEX `fk_spcongrusr1010_prf1_idx` (`iduser` ASC) , CONSTRAINT `fk_spcongrusr1010_congr10101` FOREIGN KEY (`contactgroup1010_id` ) REFERENCES `admin_social`.`contactgroup1010` (`id` ) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT `fk_spcongrusr1010_prf1` FOREIGN KEY (`iduser` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisoksubscriber1010` (`profile_id` INT UNSIGNED NOT NULL , `deleted` TINYINT(1) NOT NULL , `state` INT UNSIGNED NOT NULL , INDEX `fk_spss1010_prf1_idx` (`profile_id` ASC) , CONSTRAINT `fk_spss1010_prf1` FOREIGN KEY (`profile_id` ) REFERENCES `admin_social`.`profile` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `admin_social`.`spisokblogmetka1010` (`blog1010_id` INT UNSIGNED NOT NULL , `blogmetka_idblogmetka` INT UNSIGNED NOT NULL , INDEX `fk_spblgmtk1010_blg10101_idx` (`blog1010_id` ASC) , INDEX `fk_spblgmtk1010_blgmtk1_idx` (`blogmetka_idblogmetka` ASC) , CONSTRAINT `fk_spblgmtk1010_blg10101` FOREIGN KEY (`blog1010_id` ) REFERENCES `admin_social`.`blog1010` (`id` ) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT `fk_spblgmtk1010_blgmtk1` FOREIGN KEY (`blogmetka_idblogmetka` ) REFERENCES `admin_social`.`blogmetka` (`idblogmetka` ) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;


# TRIGGERS
DELIMITER $$
USE `admin_social` $$
CREATE TRIGGER `wall1001_AINS` AFTER INSERT ON wall1001 FOR EACH ROW IF NEW.extension is NULL AND NEW.`idauthor` = '1001' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` + 1 , `admin_social`.`profile`.`countwallmy` = `admin_social`.`profile`.`countwallmy` + 1 WHERE `admin_social`.`profile`.`id` = '1001'; ELSE IF NEW.extension is NULL AND NEW.`idauthor` <> '1001' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` + 1 WHERE `admin_social`.`profile`.`id` = '1001'; END IF; END IF$$
CREATE TRIGGER `wall1001_ADEL` AFTER DELETE ON wall1001 FOR EACH ROW IF OLD.extension is NULL AND OLD.`idauthor` = '1001' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` - 1, `admin_social`.`profile`.`countwallmy` = `admin_social`.`profile`.`countwallmy` - 1 WHERE `admin_social`.`profile`.`id` = '1001'; ELSE IF OLD.extension is NULL AND OLD.`idauthor` <> '1001' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` - 1 WHERE `admin_social`.`profile`.`id` = '1001'; END IF; END IF$$
CREATE TRIGGER `commentwall1001_AINS` AFTER INSERT ON `commentwall1001` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE wall1001 SET countcomment= countcomment + 1 WHERE wall1001.id=NEW.wall1001_id; END IF$$
CREATE TRIGGER `commentwall1001_ADEL` AFTER DELETE ON `commentwall1001` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE wall1001 SET countcomment= countcomment - 1 WHERE wall1001.id=OLD.wall1001_id; END IF$$
CREATE TRIGGER `likecommentwall1001_AINS` AFTER INSERT ON `likecommentwall1001` FOR EACH ROW UPDATE commentwall1001 SET countlike = countlike +1 WHERE commentwall1001.id = New.commentwall1001_id;$$
CREATE TRIGGER `likecommentwall1001_ADEL` AFTER DELETE ON `likecommentwall1001` FOR EACH ROW UPDATE commentwall1001 SET countlike = countlike -1 WHERE commentwall1001.id = old.commentwall1001_id;$$
CREATE TRIGGER `likewall1001_AINS` AFTER INSERT ON `likewall1001` FOR EACH ROW UPDATE wall1001 SET countlike = countlike +1 WHERE wall1001.id = new.wall1001_id;$$
CREATE TRIGGER `likewall1001_ADEL` AFTER DELETE ON `likewall1001` FOR EACH ROW UPDATE wall1001 SET countlike = countlike -1 WHERE wall1001.id = old.wall1001_id;$$
CREATE TRIGGER `blog1001_AINS` AFTER INSERT ON `blog1001` FOR EACH ROW IF NEW.extension is NULL AND NEW.`idauthor` = '1001' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` + 1 WHERE `admin_social`.`profile`.`id` = '1001'; ELSE IF NEW.extension is NULL AND NEW.`idauthor` <> '1001' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` + 1 WHERE `admin_social`.`profile`.`id` = '1001'; END IF; END IF$$
CREATE TRIGGER `blog1001_ADEL` AFTER DELETE ON `blog1001` FOR EACH ROW IF OLD.extension is NULL AND OLD.`idauthor` = '1001' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` - 1 WHERE `admin_social`.`profile`.`id` = '1001'; ELSE IF OLD.extension is NULL AND OLD.`idauthor` <> '1001' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` - 1 WHERE `admin_social`.`profile`.`id` = '1001'; END IF; END IF$$
CREATE TRIGGER `likeblog1001_AINS` AFTER INSERT ON `likeblog1001` FOR EACH ROW UPDATE blog1001 SET countlike = countlike +1 WHERE blog1001.id = new.blog1001_id;$$
CREATE TRIGGER `likeblog1001_ADEL` AFTER DELETE ON `likeblog1001` FOR EACH ROW UPDATE blog1001 SET countlike = countlike -1 WHERE blog1001.id = old.blog1001_id;$$
CREATE TRIGGER `commentblog1001_AINS` AFTER INSERT ON `commentblog1001` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE blog1001 SET countcomment= countcomment + 1 WHERE blog1001.id=NEW.blog1001_id; IF NEW.extension is NULL AND NEW.`profile_id` = '1001' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` + 1 WHERE `admin_social`.`profile`.`id` = '1001'; ELSE IF NEW.extension is NULL AND NEW.`profile_id` <> '1001' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` + 1 WHERE `admin_social`.`profile`.`id` = '1001'; END IF; END IF; END IF$$
CREATE TRIGGER `commentblog1001_ADEL` AFTER DELETE ON `commentblog1001` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE blog1001 SET countcomment= countcomment - 1 WHERE blog1001.id=OLD.blog1001_id; IF OLD.extension is NULL AND OLD.`profile_id` = '1001' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` - 1 WHERE `admin_social`.`profile`.`id` = '1001'; ELSE IF OLD.extension is NULL AND OLD.`profile_id` <> '1001' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` - 1 WHERE `admin_social`.`profile`.`id` = '1001'; END IF; END IF; END IF$$
CREATE TRIGGER `likecommentblog1001_AINS` AFTER INSERT ON `likecommentblog1001` FOR EACH ROW UPDATE commentblog1001 SET countlike = countlike +1 WHERE commentblog1001.id = New.commentblog1001_id;$$
CREATE TRIGGER `likecommentblog1001_ADEL` AFTER DELETE ON `likecommentblog1001` FOR EACH ROW UPDATE commentblog1001 SET countlike = countlike -1 WHERE commentblog1001.id = old.commentblog1001_id;$$
CREATE TRIGGER `album1001_AINS` AFTER INSERT ON `album1001` FOR EACH ROW UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countalbum` = `admin_social`.`profile`.`countalbum` + 1 WHERE `admin_social`.`profile`.`id` = '1001';$$
CREATE TRIGGER `album1001_ADEL` AFTER DELETE ON `album1001` FOR EACH ROW UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countalbum` = `admin_social`.`profile`.`countalbum` - 1 WHERE `admin_social`.`profile`.`id` = '1001';$$
CREATE TRIGGER `likealbum1001_AINS` AFTER INSERT ON `likealbum1001` FOR EACH ROW UPDATE album1001 SET countlike = countlike +1 WHERE album1001.id = new.album1001_id;$$
CREATE TRIGGER `likealbum1001_ADEL` AFTER DELETE ON `likealbum1001` FOR EACH ROW UPDATE album1001 SET countlike = countlike -1 WHERE album1001.id = old.album1001_id;$$
CREATE TRIGGER `commentalbum1001_AINS` AFTER INSERT ON `commentalbum1001` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE album1001 SET countcomment= countcomment + 1 WHERE album1001.id=NEW.album1001_id; END IF$$
CREATE TRIGGER `commentalbum1001_ADEL` AFTER DELETE ON `commentalbum1001` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE album1001 SET countcomment= countcomment - 1 WHERE album1001.id=OLD.album1001_id; END IF$$
CREATE TRIGGER `likecommentalbum1001_AINS` AFTER INSERT ON `likecommentalbum1001` FOR EACH ROW UPDATE commentalbum1001 SET countlike = countlike +1 WHERE commentalbum1001.id = New.commentalbum1001_id;$$
CREATE TRIGGER `likecommentalbum1001_ADEL` AFTER DELETE ON `likecommentalbum1001` FOR EACH ROW UPDATE commentalbum1001 SET countlike = countlike -1 WHERE commentalbum1001.id = old.commentalbum1001_id;$$
CREATE TRIGGER `spisokalbumphoto1001_AINS` AFTER INSERT ON `spisokalbumphoto1001` FOR EACH ROW UPDATE `admin_social`.`album1001` SET `admin_social`.`album1001`.`countphoto` = `admin_social`.`album1001`.`countphoto` + 1 WHERE `admin_social`.`album1001`.`id` = NEW.album1001_id;$$
CREATE TRIGGER `spisokalbumphoto1001_ADEL` AFTER DELETE ON `spisokalbumphoto1001` FOR EACH ROW UPDATE `admin_social`.`album1001` SET `admin_social`.`album1001`.`countphoto` = `admin_social`.`album1001`.`countphoto` - 1 WHERE `admin_social`.`album1001`.`id` = OLD.album1001_id;$$
CREATE TRIGGER `likespisokalbumphoto1001_AINS` AFTER INSERT ON `likespisokalbumphoto1001` FOR EACH ROW UPDATE spisokalbumphoto1001 SET countlike = countlike +1 WHERE spisokalbumphoto1001.id = new.spisokalbumphoto1001_id;$$
CREATE TRIGGER `likespisokalbumphoto1001_ADEL` AFTER DELETE ON `likespisokalbumphoto1001` FOR EACH ROW UPDATE spisokalbumphoto1001 SET countlike = countlike -1 WHERE spisokalbumphoto1001.id = old.spisokalbumphoto1001_id;$$
CREATE TRIGGER `commentspisokalbumphoto1001_AINS` AFTER INSERT ON `commentspisokalbumphoto1001` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE spisokalbumphoto1001 SET countcomment= countcomment + 1 WHERE spisokalbumphoto1001.id=NEW.spisokalbumphoto1001_id; END IF$$
CREATE TRIGGER `commentspisokalbumphoto1001_ADEL` AFTER DELETE ON `commentspisokalbumphoto1001` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE spisokalbumphoto1001 SET countcomment= countcomment - 1 WHERE spisokalbumphoto1001.id=OLD.spisokalbumphoto1001_id; END IF$$
CREATE TRIGGER `likecommentspisokalbumphoto1001_AINS` AFTER INSERT ON `likecommentspisokalbumphoto1001` FOR EACH ROW UPDATE commentspisokalbumphoto1001 SET countlike = countlike +1 WHERE commentspisokalbumphoto1001.id = New.commentspisokalbumphoto1001_id;$$
CREATE TRIGGER `likecommentspisokalbumphoto1001_ADEL` AFTER DELETE ON `likecommentspisokalbumphoto1001` FOR EACH ROW UPDATE commentspisokalbumphoto1001 SET countlike = countlike -1 WHERE commentspisokalbumphoto1001.id = old.commentspisokalbumphoto1001_id;$$
CREATE TRIGGER `message1001_AINS` AFTER INSERT ON `message1001` FOR EACH ROW BEGIN DECLARE idProfile integer; SET @idProfile := 1001; IF (@idProfile = NEW.idrecepient AND NEW.extension IS NULL) THEN UPDATE profile SET countInbox = countInbox + 1 WHERE id = @idProfile; END IF; IF (@idProfile = NEW.idsender AND NEW.extension IS NULL) THEN UPDATE profile SET countOutbox = countOutbox + 1 WHERE id = @idProfile; END IF; END$$
CREATE TRIGGER `message1001_ADEL` AFTER DELETE ON `message1001` FOR EACH ROW BEGIN DECLARE idProfile integer; SET @idProfile := 1001; IF (@idProfile = OLD.idrecepient AND OLD.extension IS NULL) THEN UPDATE profile SET countinbox = countinbox - 1 WHERE id = @idProfile; END IF; IF (@idProfile = OLD.idsender AND OLD.extension IS NULL) THEN UPDATE profile SET countOutbox = countoutbox - 1 WHERE id = @idProfile; END IF; END$$
CREATE TRIGGER `contactgroup1001_BDEL` BEFORE DELETE ON contactgroup1001 FOR EACH ROW BEGIN UPDATE spisokcontactgroupuser1001 SET state = 2 WHERE contactgroup1001_id = OLD.id AND iduser not in (SELECT * FROM (SELECT DISTINCT iduser FROM spisokcontactgroupuser1001 WHERE contactgroup1001_id != OLD.id) AS X); END$$
CREATE TRIGGER `contactgroup1001_ADEL` AFTER DELETE ON contactgroup1001 FOR EACH ROW BEGIN DELETE FROM spisokcontactgroupuser1001 WHERE contactgroup1001_id is null AND state =0; END$$
CREATE TRIGGER `spisokcontactgroupuser1001_BINS` before INSERT ON  `spisokcontactgroupuser1001` FOR EACH ROW BEGIN if NEW.contactgroup1001_id IS NOT NULL and NEW.state = 0 then UPDATE contactgroup1001 SET countuser = countuser +1 WHERE contactgroup1001.id =NEW.contactgroup1001_id; SET @a= (Select count(*) from spisokcontactgroupuser1001 where iduser = NEW.iduser); if @a<=0 then UPDATE profile SET countcontact = countcontact +1 WHERE profile.id =1001; END IF;  END IF; END$$
CREATE TRIGGER `spisokcontactgroupuser1001_ADEL` AFTER DELETE ON  `spisokcontactgroupuser1001` FOR EACH ROW BEGIN if OLD.contactgroup1001_id IS NOT NULL and OLD.state = 0 then UPDATE contactgroup1001 SET countuser = countuser -1 WHERE contactgroup1001.id =OLD.contactgroup1001_id; SET @a= (Select count(*) from spisokcontactgroupuser1001 where iduser = OLD.iduser); if @a<=0 then UPDATE profile SET countcontact = countcontact -1 WHERE profile.id =1001; END IF; END IF; END$$
CREATE TRIGGER `spisokcontactgroupuser1001_AUPD` after update ON  `spisokcontactgroupuser1001` FOR EACH ROW BEGIN UPDATE profile SET countcontact = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1001 where state = 0) as y) where id =1001; if OLD.contactgroup1001_id is null and NEW.contactgroup1001_id is not null then UPDATE contactgroup1001 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1001 where state = 0 and contactgroup1001_id = NEW.contactgroup1001_id) as y) where id =NEW.contactgroup1001_id; end if;  if OLD.contactgroup1001_id is not null and NEW.contactgroup1001_id is null then UPDATE contactgroup1001 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1001 where state = 0 and contactgroup1001_id = OLD.contactgroup1001_id) as y) where id =OLD.contactgroup1001_id; end if;  if OLD.contactgroup1001_id is not null and OLD.state = 0 and NEW.state != 0  then UPDATE contactgroup1001 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1001 where state = 0 and contactgroup1001_id = OLD.contactgroup1001_id) as y) where id =OLD.contactgroup1001_id; end if; if OLD.contactgroup1001_id is not null and OLD.state != 0 and NEW.state = 0  then UPDATE contactgroup1001 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1001 where state = 0 and contactgroup1001_id = OLD.contactgroup1001_id) as y) where id =OLD.contactgroup1001_id; end if; if OLD.contactgroup1001_id != NEW.contactgroup1001_id then UPDATE contactgroup1001 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1001 where state = 0 and contactgroup1001_id = OLD.contactgroup1001_id) as y) where id =OLD.contactgroup1001_id; UPDATE contactgroup1001 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1001 where state = 0 and contactgroup1001_id = NEW.contactgroup1001_id) as y) where id =NEW.contactgroup1001_id; end if; END$$
CREATE TRIGGER `wall1002_AINS` AFTER INSERT ON wall1002 FOR EACH ROW IF NEW.extension is NULL AND NEW.`idauthor` = '1002' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` + 1 , `admin_social`.`profile`.`countwallmy` = `admin_social`.`profile`.`countwallmy` + 1 WHERE `admin_social`.`profile`.`id` = '1002'; ELSE IF NEW.extension is NULL AND NEW.`idauthor` <> '1002' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` + 1 WHERE `admin_social`.`profile`.`id` = '1002'; END IF; END IF$$
CREATE TRIGGER `wall1002_ADEL` AFTER DELETE ON wall1002 FOR EACH ROW IF OLD.extension is NULL AND OLD.`idauthor` = '1002' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` - 1, `admin_social`.`profile`.`countwallmy` = `admin_social`.`profile`.`countwallmy` - 1 WHERE `admin_social`.`profile`.`id` = '1002'; ELSE IF OLD.extension is NULL AND OLD.`idauthor` <> '1002' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` - 1 WHERE `admin_social`.`profile`.`id` = '1002'; END IF; END IF$$
CREATE TRIGGER `commentwall1002_AINS` AFTER INSERT ON `commentwall1002` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE wall1002 SET countcomment= countcomment + 1 WHERE wall1002.id=NEW.wall1002_id; END IF$$
CREATE TRIGGER `commentwall1002_ADEL` AFTER DELETE ON `commentwall1002` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE wall1002 SET countcomment= countcomment - 1 WHERE wall1002.id=OLD.wall1002_id; END IF$$
CREATE TRIGGER `likecommentwall1002_AINS` AFTER INSERT ON `likecommentwall1002` FOR EACH ROW UPDATE commentwall1002 SET countlike = countlike +1 WHERE commentwall1002.id = New.commentwall1002_id;$$
CREATE TRIGGER `likecommentwall1002_ADEL` AFTER DELETE ON `likecommentwall1002` FOR EACH ROW UPDATE commentwall1002 SET countlike = countlike -1 WHERE commentwall1002.id = old.commentwall1002_id;$$
CREATE TRIGGER `likewall1002_AINS` AFTER INSERT ON `likewall1002` FOR EACH ROW UPDATE wall1002 SET countlike = countlike +1 WHERE wall1002.id = new.wall1002_id;$$
CREATE TRIGGER `likewall1002_ADEL` AFTER DELETE ON `likewall1002` FOR EACH ROW UPDATE wall1002 SET countlike = countlike -1 WHERE wall1002.id = old.wall1002_id;$$
CREATE TRIGGER `blog1002_AINS` AFTER INSERT ON `blog1002` FOR EACH ROW IF NEW.extension is NULL AND NEW.`idauthor` = '1002' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` + 1 WHERE `admin_social`.`profile`.`id` = '1002'; ELSE IF NEW.extension is NULL AND NEW.`idauthor` <> '1002' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` + 1 WHERE `admin_social`.`profile`.`id` = '1002'; END IF; END IF$$
CREATE TRIGGER `blog1002_ADEL` AFTER DELETE ON `blog1002` FOR EACH ROW IF OLD.extension is NULL AND OLD.`idauthor` = '1002' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` - 1 WHERE `admin_social`.`profile`.`id` = '1002'; ELSE IF OLD.extension is NULL AND OLD.`idauthor` <> '1002' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` - 1 WHERE `admin_social`.`profile`.`id` = '1002'; END IF; END IF$$
CREATE TRIGGER `likeblog1002_AINS` AFTER INSERT ON `likeblog1002` FOR EACH ROW UPDATE blog1002 SET countlike = countlike +1 WHERE blog1002.id = new.blog1002_id;$$
CREATE TRIGGER `likeblog1002_ADEL` AFTER DELETE ON `likeblog1002` FOR EACH ROW UPDATE blog1002 SET countlike = countlike -1 WHERE blog1002.id = old.blog1002_id;$$
CREATE TRIGGER `commentblog1002_AINS` AFTER INSERT ON `commentblog1002` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE blog1002 SET countcomment= countcomment + 1 WHERE blog1002.id=NEW.blog1002_id; IF NEW.extension is NULL AND NEW.`profile_id` = '1002' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` + 1 WHERE `admin_social`.`profile`.`id` = '1002'; ELSE IF NEW.extension is NULL AND NEW.`profile_id` <> '1002' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` + 1 WHERE `admin_social`.`profile`.`id` = '1002'; END IF; END IF; END IF$$
CREATE TRIGGER `commentblog1002_ADEL` AFTER DELETE ON `commentblog1002` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE blog1002 SET countcomment= countcomment - 1 WHERE blog1002.id=OLD.blog1002_id; IF OLD.extension is NULL AND OLD.`profile_id` = '1002' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` - 1 WHERE `admin_social`.`profile`.`id` = '1002'; ELSE IF OLD.extension is NULL AND OLD.`profile_id` <> '1002' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` - 1 WHERE `admin_social`.`profile`.`id` = '1002'; END IF; END IF; END IF$$
CREATE TRIGGER `likecommentblog1002_AINS` AFTER INSERT ON `likecommentblog1002` FOR EACH ROW UPDATE commentblog1002 SET countlike = countlike +1 WHERE commentblog1002.id = New.commentblog1002_id;$$
CREATE TRIGGER `likecommentblog1002_ADEL` AFTER DELETE ON `likecommentblog1002` FOR EACH ROW UPDATE commentblog1002 SET countlike = countlike -1 WHERE commentblog1002.id = old.commentblog1002_id;$$
CREATE TRIGGER `album1002_AINS` AFTER INSERT ON `album1002` FOR EACH ROW UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countalbum` = `admin_social`.`profile`.`countalbum` + 1 WHERE `admin_social`.`profile`.`id` = '1002';$$
CREATE TRIGGER `album1002_ADEL` AFTER DELETE ON `album1002` FOR EACH ROW UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countalbum` = `admin_social`.`profile`.`countalbum` - 1 WHERE `admin_social`.`profile`.`id` = '1002';$$
CREATE TRIGGER `likealbum1002_AINS` AFTER INSERT ON `likealbum1002` FOR EACH ROW UPDATE album1002 SET countlike = countlike +1 WHERE album1002.id = new.album1002_id;$$
CREATE TRIGGER `likealbum1002_ADEL` AFTER DELETE ON `likealbum1002` FOR EACH ROW UPDATE album1002 SET countlike = countlike -1 WHERE album1002.id = old.album1002_id;$$
CREATE TRIGGER `commentalbum1002_AINS` AFTER INSERT ON `commentalbum1002` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE album1002 SET countcomment= countcomment + 1 WHERE album1002.id=NEW.album1002_id; END IF$$
CREATE TRIGGER `commentalbum1002_ADEL` AFTER DELETE ON `commentalbum1002` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE album1002 SET countcomment= countcomment - 1 WHERE album1002.id=OLD.album1002_id; END IF$$
CREATE TRIGGER `likecommentalbum1002_AINS` AFTER INSERT ON `likecommentalbum1002` FOR EACH ROW UPDATE commentalbum1002 SET countlike = countlike +1 WHERE commentalbum1002.id = New.commentalbum1002_id;$$
CREATE TRIGGER `likecommentalbum1002_ADEL` AFTER DELETE ON `likecommentalbum1002` FOR EACH ROW UPDATE commentalbum1002 SET countlike = countlike -1 WHERE commentalbum1002.id = old.commentalbum1002_id;$$
CREATE TRIGGER `spisokalbumphoto1002_AINS` AFTER INSERT ON `spisokalbumphoto1002` FOR EACH ROW UPDATE `admin_social`.`album1002` SET `admin_social`.`album1002`.`countphoto` = `admin_social`.`album1002`.`countphoto` + 1 WHERE `admin_social`.`album1002`.`id` = NEW.album1002_id;$$
CREATE TRIGGER `spisokalbumphoto1002_ADEL` AFTER DELETE ON `spisokalbumphoto1002` FOR EACH ROW UPDATE `admin_social`.`album1002` SET `admin_social`.`album1002`.`countphoto` = `admin_social`.`album1002`.`countphoto` - 1 WHERE `admin_social`.`album1002`.`id` = OLD.album1002_id;$$
CREATE TRIGGER `likespisokalbumphoto1002_AINS` AFTER INSERT ON `likespisokalbumphoto1002` FOR EACH ROW UPDATE spisokalbumphoto1002 SET countlike = countlike +1 WHERE spisokalbumphoto1002.id = new.spisokalbumphoto1002_id;$$
CREATE TRIGGER `likespisokalbumphoto1002_ADEL` AFTER DELETE ON `likespisokalbumphoto1002` FOR EACH ROW UPDATE spisokalbumphoto1002 SET countlike = countlike -1 WHERE spisokalbumphoto1002.id = old.spisokalbumphoto1002_id;$$
CREATE TRIGGER `commentspisokalbumphoto1002_AINS` AFTER INSERT ON `commentspisokalbumphoto1002` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE spisokalbumphoto1002 SET countcomment= countcomment + 1 WHERE spisokalbumphoto1002.id=NEW.spisokalbumphoto1002_id; END IF$$
CREATE TRIGGER `commentspisokalbumphoto1002_ADEL` AFTER DELETE ON `commentspisokalbumphoto1002` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE spisokalbumphoto1002 SET countcomment= countcomment - 1 WHERE spisokalbumphoto1002.id=OLD.spisokalbumphoto1002_id; END IF$$
CREATE TRIGGER `likecommentspisokalbumphoto1002_AINS` AFTER INSERT ON `likecommentspisokalbumphoto1002` FOR EACH ROW UPDATE commentspisokalbumphoto1002 SET countlike = countlike +1 WHERE commentspisokalbumphoto1002.id = New.commentspisokalbumphoto1002_id;$$
CREATE TRIGGER `likecommentspisokalbumphoto1002_ADEL` AFTER DELETE ON `likecommentspisokalbumphoto1002` FOR EACH ROW UPDATE commentspisokalbumphoto1002 SET countlike = countlike -1 WHERE commentspisokalbumphoto1002.id = old.commentspisokalbumphoto1002_id;$$
CREATE TRIGGER `message1002_AINS` AFTER INSERT ON `message1002` FOR EACH ROW BEGIN DECLARE idProfile integer; SET @idProfile := 1002; IF (@idProfile = NEW.idrecepient AND NEW.extension IS NULL) THEN UPDATE profile SET countInbox = countInbox + 1 WHERE id = @idProfile; END IF; IF (@idProfile = NEW.idsender AND NEW.extension IS NULL) THEN UPDATE profile SET countOutbox = countOutbox + 1 WHERE id = @idProfile; END IF; END$$
CREATE TRIGGER `message1002_ADEL` AFTER DELETE ON `message1002` FOR EACH ROW BEGIN DECLARE idProfile integer; SET @idProfile := 1002; IF (@idProfile = OLD.idrecepient AND OLD.extension IS NULL) THEN UPDATE profile SET countinbox = countinbox - 1 WHERE id = @idProfile; END IF; IF (@idProfile = OLD.idsender AND OLD.extension IS NULL) THEN UPDATE profile SET countOutbox = countoutbox - 1 WHERE id = @idProfile; END IF; END$$
CREATE TRIGGER `contactgroup1002_BDEL` BEFORE DELETE ON contactgroup1002 FOR EACH ROW BEGIN UPDATE spisokcontactgroupuser1002 SET state = 2 WHERE contactgroup1002_id = OLD.id AND iduser not in (SELECT * FROM (SELECT DISTINCT iduser FROM spisokcontactgroupuser1002 WHERE contactgroup1002_id != OLD.id) AS X); END$$
CREATE TRIGGER `contactgroup1002_ADEL` AFTER DELETE ON contactgroup1002 FOR EACH ROW BEGIN DELETE FROM spisokcontactgroupuser1002 WHERE contactgroup1002_id is null AND state =0; END$$
CREATE TRIGGER `spisokcontactgroupuser1002_BINS` before INSERT ON  `spisokcontactgroupuser1002` FOR EACH ROW BEGIN if NEW.contactgroup1002_id IS NOT NULL and NEW.state = 0 then UPDATE contactgroup1002 SET countuser = countuser +1 WHERE contactgroup1002.id =NEW.contactgroup1002_id; SET @a= (Select count(*) from spisokcontactgroupuser1002 where iduser = NEW.iduser); if @a<=0 then UPDATE profile SET countcontact = countcontact +1 WHERE profile.id =1002; END IF;  END IF; END$$
CREATE TRIGGER `spisokcontactgroupuser1002_ADEL` AFTER DELETE ON  `spisokcontactgroupuser1002` FOR EACH ROW BEGIN if OLD.contactgroup1002_id IS NOT NULL and OLD.state = 0 then UPDATE contactgroup1002 SET countuser = countuser -1 WHERE contactgroup1002.id =OLD.contactgroup1002_id; SET @a= (Select count(*) from spisokcontactgroupuser1002 where iduser = OLD.iduser); if @a<=0 then UPDATE profile SET countcontact = countcontact -1 WHERE profile.id =1002; END IF; END IF; END$$
CREATE TRIGGER `spisokcontactgroupuser1002_AUPD` after update ON  `spisokcontactgroupuser1002` FOR EACH ROW BEGIN UPDATE profile SET countcontact = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1002 where state = 0) as y) where id =1002; if OLD.contactgroup1002_id is null and NEW.contactgroup1002_id is not null then UPDATE contactgroup1002 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1002 where state = 0 and contactgroup1002_id = NEW.contactgroup1002_id) as y) where id =NEW.contactgroup1002_id; end if;  if OLD.contactgroup1002_id is not null and NEW.contactgroup1002_id is null then UPDATE contactgroup1002 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1002 where state = 0 and contactgroup1002_id = OLD.contactgroup1002_id) as y) where id =OLD.contactgroup1002_id; end if;  if OLD.contactgroup1002_id is not null and OLD.state = 0 and NEW.state != 0  then UPDATE contactgroup1002 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1002 where state = 0 and contactgroup1002_id = OLD.contactgroup1002_id) as y) where id =OLD.contactgroup1002_id; end if; if OLD.contactgroup1002_id is not null and OLD.state != 0 and NEW.state = 0  then UPDATE contactgroup1002 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1002 where state = 0 and contactgroup1002_id = OLD.contactgroup1002_id) as y) where id =OLD.contactgroup1002_id; end if; if OLD.contactgroup1002_id != NEW.contactgroup1002_id then UPDATE contactgroup1002 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1002 where state = 0 and contactgroup1002_id = OLD.contactgroup1002_id) as y) where id =OLD.contactgroup1002_id; UPDATE contactgroup1002 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1002 where state = 0 and contactgroup1002_id = NEW.contactgroup1002_id) as y) where id =NEW.contactgroup1002_id; end if; END$$
CREATE TRIGGER `wall1004_AINS` AFTER INSERT ON wall1004 FOR EACH ROW IF NEW.extension is NULL AND NEW.`idauthor` = '1004' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` + 1 , `admin_social`.`profile`.`countwallmy` = `admin_social`.`profile`.`countwallmy` + 1 WHERE `admin_social`.`profile`.`id` = '1004'; ELSE IF NEW.extension is NULL AND NEW.`idauthor` <> '1004' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` + 1 WHERE `admin_social`.`profile`.`id` = '1004'; END IF; END IF$$
CREATE TRIGGER `wall1004_ADEL` AFTER DELETE ON wall1004 FOR EACH ROW IF OLD.extension is NULL AND OLD.`idauthor` = '1004' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` - 1, `admin_social`.`profile`.`countwallmy` = `admin_social`.`profile`.`countwallmy` - 1 WHERE `admin_social`.`profile`.`id` = '1004'; ELSE IF OLD.extension is NULL AND OLD.`idauthor` <> '1004' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` - 1 WHERE `admin_social`.`profile`.`id` = '1004'; END IF; END IF$$
CREATE TRIGGER `commentwall1004_AINS` AFTER INSERT ON `commentwall1004` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE wall1004 SET countcomment= countcomment + 1 WHERE wall1004.id=NEW.wall1004_id; END IF$$
CREATE TRIGGER `commentwall1004_ADEL` AFTER DELETE ON `commentwall1004` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE wall1004 SET countcomment= countcomment - 1 WHERE wall1004.id=OLD.wall1004_id; END IF$$
CREATE TRIGGER `likecommentwall1004_AINS` AFTER INSERT ON `likecommentwall1004` FOR EACH ROW UPDATE commentwall1004 SET countlike = countlike +1 WHERE commentwall1004.id = New.commentwall1004_id;$$
CREATE TRIGGER `likecommentwall1004_ADEL` AFTER DELETE ON `likecommentwall1004` FOR EACH ROW UPDATE commentwall1004 SET countlike = countlike -1 WHERE commentwall1004.id = old.commentwall1004_id;$$
CREATE TRIGGER `likewall1004_AINS` AFTER INSERT ON `likewall1004` FOR EACH ROW UPDATE wall1004 SET countlike = countlike +1 WHERE wall1004.id = new.wall1004_id;$$
CREATE TRIGGER `likewall1004_ADEL` AFTER DELETE ON `likewall1004` FOR EACH ROW UPDATE wall1004 SET countlike = countlike -1 WHERE wall1004.id = old.wall1004_id;$$
CREATE TRIGGER `blog1004_AINS` AFTER INSERT ON `blog1004` FOR EACH ROW IF NEW.extension is NULL AND NEW.`idauthor` = '1004' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` + 1 WHERE `admin_social`.`profile`.`id` = '1004'; ELSE IF NEW.extension is NULL AND NEW.`idauthor` <> '1004' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` + 1 WHERE `admin_social`.`profile`.`id` = '1004'; END IF; END IF$$
CREATE TRIGGER `blog1004_ADEL` AFTER DELETE ON `blog1004` FOR EACH ROW IF OLD.extension is NULL AND OLD.`idauthor` = '1004' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` - 1 WHERE `admin_social`.`profile`.`id` = '1004'; ELSE IF OLD.extension is NULL AND OLD.`idauthor` <> '1004' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` - 1 WHERE `admin_social`.`profile`.`id` = '1004'; END IF; END IF$$
CREATE TRIGGER `likeblog1004_AINS` AFTER INSERT ON `likeblog1004` FOR EACH ROW UPDATE blog1004 SET countlike = countlike +1 WHERE blog1004.id = new.blog1004_id;$$
CREATE TRIGGER `likeblog1004_ADEL` AFTER DELETE ON `likeblog1004` FOR EACH ROW UPDATE blog1004 SET countlike = countlike -1 WHERE blog1004.id = old.blog1004_id;$$
CREATE TRIGGER `commentblog1004_AINS` AFTER INSERT ON `commentblog1004` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE blog1004 SET countcomment= countcomment + 1 WHERE blog1004.id=NEW.blog1004_id; IF NEW.extension is NULL AND NEW.`profile_id` = '1004' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` + 1 WHERE `admin_social`.`profile`.`id` = '1004'; ELSE IF NEW.extension is NULL AND NEW.`profile_id` <> '1004' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` + 1 WHERE `admin_social`.`profile`.`id` = '1004'; END IF; END IF; END IF$$
CREATE TRIGGER `commentblog1004_ADEL` AFTER DELETE ON `commentblog1004` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE blog1004 SET countcomment= countcomment - 1 WHERE blog1004.id=OLD.blog1004_id; IF OLD.extension is NULL AND OLD.`profile_id` = '1004' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` - 1 WHERE `admin_social`.`profile`.`id` = '1004'; ELSE IF OLD.extension is NULL AND OLD.`profile_id` <> '1004' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` - 1 WHERE `admin_social`.`profile`.`id` = '1004'; END IF; END IF; END IF$$
CREATE TRIGGER `likecommentblog1004_AINS` AFTER INSERT ON `likecommentblog1004` FOR EACH ROW UPDATE commentblog1004 SET countlike = countlike +1 WHERE commentblog1004.id = New.commentblog1004_id;$$
CREATE TRIGGER `likecommentblog1004_ADEL` AFTER DELETE ON `likecommentblog1004` FOR EACH ROW UPDATE commentblog1004 SET countlike = countlike -1 WHERE commentblog1004.id = old.commentblog1004_id;$$
CREATE TRIGGER `album1004_AINS` AFTER INSERT ON `album1004` FOR EACH ROW UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countalbum` = `admin_social`.`profile`.`countalbum` + 1 WHERE `admin_social`.`profile`.`id` = '1004';$$
CREATE TRIGGER `album1004_ADEL` AFTER DELETE ON `album1004` FOR EACH ROW UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countalbum` = `admin_social`.`profile`.`countalbum` - 1 WHERE `admin_social`.`profile`.`id` = '1004';$$
CREATE TRIGGER `likealbum1004_AINS` AFTER INSERT ON `likealbum1004` FOR EACH ROW UPDATE album1004 SET countlike = countlike +1 WHERE album1004.id = new.album1004_id;$$
CREATE TRIGGER `likealbum1004_ADEL` AFTER DELETE ON `likealbum1004` FOR EACH ROW UPDATE album1004 SET countlike = countlike -1 WHERE album1004.id = old.album1004_id;$$
CREATE TRIGGER `commentalbum1004_AINS` AFTER INSERT ON `commentalbum1004` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE album1004 SET countcomment= countcomment + 1 WHERE album1004.id=NEW.album1004_id; END IF$$
CREATE TRIGGER `commentalbum1004_ADEL` AFTER DELETE ON `commentalbum1004` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE album1004 SET countcomment= countcomment - 1 WHERE album1004.id=OLD.album1004_id; END IF$$
CREATE TRIGGER `likecommentalbum1004_AINS` AFTER INSERT ON `likecommentalbum1004` FOR EACH ROW UPDATE commentalbum1004 SET countlike = countlike +1 WHERE commentalbum1004.id = New.commentalbum1004_id;$$
CREATE TRIGGER `likecommentalbum1004_ADEL` AFTER DELETE ON `likecommentalbum1004` FOR EACH ROW UPDATE commentalbum1004 SET countlike = countlike -1 WHERE commentalbum1004.id = old.commentalbum1004_id;$$
CREATE TRIGGER `spisokalbumphoto1004_AINS` AFTER INSERT ON `spisokalbumphoto1004` FOR EACH ROW UPDATE `admin_social`.`album1004` SET `admin_social`.`album1004`.`countphoto` = `admin_social`.`album1004`.`countphoto` + 1 WHERE `admin_social`.`album1004`.`id` = NEW.album1004_id;$$
CREATE TRIGGER `spisokalbumphoto1004_ADEL` AFTER DELETE ON `spisokalbumphoto1004` FOR EACH ROW UPDATE `admin_social`.`album1004` SET `admin_social`.`album1004`.`countphoto` = `admin_social`.`album1004`.`countphoto` - 1 WHERE `admin_social`.`album1004`.`id` = OLD.album1004_id;$$
CREATE TRIGGER `likespisokalbumphoto1004_AINS` AFTER INSERT ON `likespisokalbumphoto1004` FOR EACH ROW UPDATE spisokalbumphoto1004 SET countlike = countlike +1 WHERE spisokalbumphoto1004.id = new.spisokalbumphoto1004_id;$$
CREATE TRIGGER `likespisokalbumphoto1004_ADEL` AFTER DELETE ON `likespisokalbumphoto1004` FOR EACH ROW UPDATE spisokalbumphoto1004 SET countlike = countlike -1 WHERE spisokalbumphoto1004.id = old.spisokalbumphoto1004_id;$$
CREATE TRIGGER `commentspisokalbumphoto1004_AINS` AFTER INSERT ON `commentspisokalbumphoto1004` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE spisokalbumphoto1004 SET countcomment= countcomment + 1 WHERE spisokalbumphoto1004.id=NEW.spisokalbumphoto1004_id; END IF$$
CREATE TRIGGER `commentspisokalbumphoto1004_ADEL` AFTER DELETE ON `commentspisokalbumphoto1004` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE spisokalbumphoto1004 SET countcomment= countcomment - 1 WHERE spisokalbumphoto1004.id=OLD.spisokalbumphoto1004_id; END IF$$
CREATE TRIGGER `likecommentspisokalbumphoto1004_AINS` AFTER INSERT ON `likecommentspisokalbumphoto1004` FOR EACH ROW UPDATE commentspisokalbumphoto1004 SET countlike = countlike +1 WHERE commentspisokalbumphoto1004.id = New.commentspisokalbumphoto1004_id;$$
CREATE TRIGGER `likecommentspisokalbumphoto1004_ADEL` AFTER DELETE ON `likecommentspisokalbumphoto1004` FOR EACH ROW UPDATE commentspisokalbumphoto1004 SET countlike = countlike -1 WHERE commentspisokalbumphoto1004.id = old.commentspisokalbumphoto1004_id;$$
CREATE TRIGGER `message1004_AINS` AFTER INSERT ON `message1004` FOR EACH ROW BEGIN DECLARE idProfile integer; SET @idProfile := 1004; IF (@idProfile = NEW.idrecepient AND NEW.extension IS NULL) THEN UPDATE profile SET countInbox = countInbox + 1 WHERE id = @idProfile; END IF; IF (@idProfile = NEW.idsender AND NEW.extension IS NULL) THEN UPDATE profile SET countOutbox = countOutbox + 1 WHERE id = @idProfile; END IF; END$$
CREATE TRIGGER `message1004_ADEL` AFTER DELETE ON `message1004` FOR EACH ROW BEGIN DECLARE idProfile integer; SET @idProfile := 1004; IF (@idProfile = OLD.idrecepient AND OLD.extension IS NULL) THEN UPDATE profile SET countinbox = countinbox - 1 WHERE id = @idProfile; END IF; IF (@idProfile = OLD.idsender AND OLD.extension IS NULL) THEN UPDATE profile SET countOutbox = countoutbox - 1 WHERE id = @idProfile; END IF; END$$
CREATE TRIGGER `contactgroup1004_BDEL` BEFORE DELETE ON contactgroup1004 FOR EACH ROW BEGIN UPDATE spisokcontactgroupuser1004 SET state = 2 WHERE contactgroup1004_id = OLD.id AND iduser not in (SELECT * FROM (SELECT DISTINCT iduser FROM spisokcontactgroupuser1004 WHERE contactgroup1004_id != OLD.id) AS X); END$$
CREATE TRIGGER `contactgroup1004_ADEL` AFTER DELETE ON contactgroup1004 FOR EACH ROW BEGIN DELETE FROM spisokcontactgroupuser1004 WHERE contactgroup1004_id is null AND state =0; END$$
CREATE TRIGGER `spisokcontactgroupuser1004_BINS` before INSERT ON  `spisokcontactgroupuser1004` FOR EACH ROW BEGIN if NEW.contactgroup1004_id IS NOT NULL and NEW.state = 0 then UPDATE contactgroup1004 SET countuser = countuser +1 WHERE contactgroup1004.id =NEW.contactgroup1004_id; SET @a= (Select count(*) from spisokcontactgroupuser1004 where iduser = NEW.iduser); if @a<=0 then UPDATE profile SET countcontact = countcontact +1 WHERE profile.id =1004; END IF;  END IF; END$$
CREATE TRIGGER `spisokcontactgroupuser1004_ADEL` AFTER DELETE ON  `spisokcontactgroupuser1004` FOR EACH ROW BEGIN if OLD.contactgroup1004_id IS NOT NULL and OLD.state = 0 then UPDATE contactgroup1004 SET countuser = countuser -1 WHERE contactgroup1004.id =OLD.contactgroup1004_id; SET @a= (Select count(*) from spisokcontactgroupuser1004 where iduser = OLD.iduser); if @a<=0 then UPDATE profile SET countcontact = countcontact -1 WHERE profile.id =1004; END IF; END IF; END$$
CREATE TRIGGER `spisokcontactgroupuser1004_AUPD` after update ON  `spisokcontactgroupuser1004` FOR EACH ROW BEGIN UPDATE profile SET countcontact = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1004 where state = 0) as y) where id =1004; if OLD.contactgroup1004_id is null and NEW.contactgroup1004_id is not null then UPDATE contactgroup1004 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1004 where state = 0 and contactgroup1004_id = NEW.contactgroup1004_id) as y) where id =NEW.contactgroup1004_id; end if;  if OLD.contactgroup1004_id is not null and NEW.contactgroup1004_id is null then UPDATE contactgroup1004 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1004 where state = 0 and contactgroup1004_id = OLD.contactgroup1004_id) as y) where id =OLD.contactgroup1004_id; end if;  if OLD.contactgroup1004_id is not null and OLD.state = 0 and NEW.state != 0  then UPDATE contactgroup1004 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1004 where state = 0 and contactgroup1004_id = OLD.contactgroup1004_id) as y) where id =OLD.contactgroup1004_id; end if; if OLD.contactgroup1004_id is not null and OLD.state != 0 and NEW.state = 0  then UPDATE contactgroup1004 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1004 where state = 0 and contactgroup1004_id = OLD.contactgroup1004_id) as y) where id =OLD.contactgroup1004_id; end if; if OLD.contactgroup1004_id != NEW.contactgroup1004_id then UPDATE contactgroup1004 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1004 where state = 0 and contactgroup1004_id = OLD.contactgroup1004_id) as y) where id =OLD.contactgroup1004_id; UPDATE contactgroup1004 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1004 where state = 0 and contactgroup1004_id = NEW.contactgroup1004_id) as y) where id =NEW.contactgroup1004_id; end if; END$$
CREATE TRIGGER `wall1008_AINS` AFTER INSERT ON wall1008 FOR EACH ROW IF NEW.extension is NULL AND NEW.`idauthor` = '1008' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` + 1 , `admin_social`.`profile`.`countwallmy` = `admin_social`.`profile`.`countwallmy` + 1 WHERE `admin_social`.`profile`.`id` = '1008'; ELSE IF NEW.extension is NULL AND NEW.`idauthor` <> '1008' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` + 1 WHERE `admin_social`.`profile`.`id` = '1008'; END IF; END IF$$
CREATE TRIGGER `wall1008_ADEL` AFTER DELETE ON wall1008 FOR EACH ROW IF OLD.extension is NULL AND OLD.`idauthor` = '1008' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` - 1, `admin_social`.`profile`.`countwallmy` = `admin_social`.`profile`.`countwallmy` - 1 WHERE `admin_social`.`profile`.`id` = '1008'; ELSE IF OLD.extension is NULL AND OLD.`idauthor` <> '1008' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` - 1 WHERE `admin_social`.`profile`.`id` = '1008'; END IF; END IF$$
CREATE TRIGGER `commentwall1008_AINS` AFTER INSERT ON `commentwall1008` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE wall1008 SET countcomment= countcomment + 1 WHERE wall1008.id=NEW.wall1008_id; END IF$$
CREATE TRIGGER `commentwall1008_ADEL` AFTER DELETE ON `commentwall1008` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE wall1008 SET countcomment= countcomment - 1 WHERE wall1008.id=OLD.wall1008_id; END IF$$
CREATE TRIGGER `likecommentwall1008_AINS` AFTER INSERT ON `likecommentwall1008` FOR EACH ROW UPDATE commentwall1008 SET countlike = countlike +1 WHERE commentwall1008.id = New.commentwall1008_id;$$
CREATE TRIGGER `likecommentwall1008_ADEL` AFTER DELETE ON `likecommentwall1008` FOR EACH ROW UPDATE commentwall1008 SET countlike = countlike -1 WHERE commentwall1008.id = old.commentwall1008_id;$$
CREATE TRIGGER `likewall1008_AINS` AFTER INSERT ON `likewall1008` FOR EACH ROW UPDATE wall1008 SET countlike = countlike +1 WHERE wall1008.id = new.wall1008_id;$$
CREATE TRIGGER `likewall1008_ADEL` AFTER DELETE ON `likewall1008` FOR EACH ROW UPDATE wall1008 SET countlike = countlike -1 WHERE wall1008.id = old.wall1008_id;$$
CREATE TRIGGER `blog1008_AINS` AFTER INSERT ON `blog1008` FOR EACH ROW IF NEW.extension is NULL AND NEW.`idauthor` = '1008' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` + 1 WHERE `admin_social`.`profile`.`id` = '1008'; ELSE IF NEW.extension is NULL AND NEW.`idauthor` <> '1008' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` + 1 WHERE `admin_social`.`profile`.`id` = '1008'; END IF; END IF$$
CREATE TRIGGER `blog1008_ADEL` AFTER DELETE ON `blog1008` FOR EACH ROW IF OLD.extension is NULL AND OLD.`idauthor` = '1008' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` - 1 WHERE `admin_social`.`profile`.`id` = '1008'; ELSE IF OLD.extension is NULL AND OLD.`idauthor` <> '1008' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` - 1 WHERE `admin_social`.`profile`.`id` = '1008'; END IF; END IF$$
CREATE TRIGGER `likeblog1008_AINS` AFTER INSERT ON `likeblog1008` FOR EACH ROW UPDATE blog1008 SET countlike = countlike +1 WHERE blog1008.id = new.blog1008_id;$$
CREATE TRIGGER `likeblog1008_ADEL` AFTER DELETE ON `likeblog1008` FOR EACH ROW UPDATE blog1008 SET countlike = countlike -1 WHERE blog1008.id = old.blog1008_id;$$
CREATE TRIGGER `commentblog1008_AINS` AFTER INSERT ON `commentblog1008` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE blog1008 SET countcomment= countcomment + 1 WHERE blog1008.id=NEW.blog1008_id; IF NEW.extension is NULL AND NEW.`profile_id` = '1008' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` + 1 WHERE `admin_social`.`profile`.`id` = '1008'; ELSE IF NEW.extension is NULL AND NEW.`profile_id` <> '1008' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` + 1 WHERE `admin_social`.`profile`.`id` = '1008'; END IF; END IF; END IF$$
CREATE TRIGGER `commentblog1008_ADEL` AFTER DELETE ON `commentblog1008` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE blog1008 SET countcomment= countcomment - 1 WHERE blog1008.id=OLD.blog1008_id; IF OLD.extension is NULL AND OLD.`profile_id` = '1008' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` - 1 WHERE `admin_social`.`profile`.`id` = '1008'; ELSE IF OLD.extension is NULL AND OLD.`profile_id` <> '1008' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` - 1 WHERE `admin_social`.`profile`.`id` = '1008'; END IF; END IF; END IF$$
CREATE TRIGGER `likecommentblog1008_AINS` AFTER INSERT ON `likecommentblog1008` FOR EACH ROW UPDATE commentblog1008 SET countlike = countlike +1 WHERE commentblog1008.id = New.commentblog1008_id;$$
CREATE TRIGGER `likecommentblog1008_ADEL` AFTER DELETE ON `likecommentblog1008` FOR EACH ROW UPDATE commentblog1008 SET countlike = countlike -1 WHERE commentblog1008.id = old.commentblog1008_id;$$
CREATE TRIGGER `album1008_AINS` AFTER INSERT ON `album1008` FOR EACH ROW UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countalbum` = `admin_social`.`profile`.`countalbum` + 1 WHERE `admin_social`.`profile`.`id` = '1008';$$
CREATE TRIGGER `album1008_ADEL` AFTER DELETE ON `album1008` FOR EACH ROW UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countalbum` = `admin_social`.`profile`.`countalbum` - 1 WHERE `admin_social`.`profile`.`id` = '1008';$$
CREATE TRIGGER `likealbum1008_AINS` AFTER INSERT ON `likealbum1008` FOR EACH ROW UPDATE album1008 SET countlike = countlike +1 WHERE album1008.id = new.album1008_id;$$
CREATE TRIGGER `likealbum1008_ADEL` AFTER DELETE ON `likealbum1008` FOR EACH ROW UPDATE album1008 SET countlike = countlike -1 WHERE album1008.id = old.album1008_id;$$
CREATE TRIGGER `commentalbum1008_AINS` AFTER INSERT ON `commentalbum1008` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE album1008 SET countcomment= countcomment + 1 WHERE album1008.id=NEW.album1008_id; END IF$$
CREATE TRIGGER `commentalbum1008_ADEL` AFTER DELETE ON `commentalbum1008` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE album1008 SET countcomment= countcomment - 1 WHERE album1008.id=OLD.album1008_id; END IF$$
CREATE TRIGGER `likecommentalbum1008_AINS` AFTER INSERT ON `likecommentalbum1008` FOR EACH ROW UPDATE commentalbum1008 SET countlike = countlike +1 WHERE commentalbum1008.id = New.commentalbum1008_id;$$
CREATE TRIGGER `likecommentalbum1008_ADEL` AFTER DELETE ON `likecommentalbum1008` FOR EACH ROW UPDATE commentalbum1008 SET countlike = countlike -1 WHERE commentalbum1008.id = old.commentalbum1008_id;$$
CREATE TRIGGER `spisokalbumphoto1008_AINS` AFTER INSERT ON `spisokalbumphoto1008` FOR EACH ROW UPDATE `admin_social`.`album1008` SET `admin_social`.`album1008`.`countphoto` = `admin_social`.`album1008`.`countphoto` + 1 WHERE `admin_social`.`album1008`.`id` = NEW.album1008_id;$$
CREATE TRIGGER `spisokalbumphoto1008_ADEL` AFTER DELETE ON `spisokalbumphoto1008` FOR EACH ROW UPDATE `admin_social`.`album1008` SET `admin_social`.`album1008`.`countphoto` = `admin_social`.`album1008`.`countphoto` - 1 WHERE `admin_social`.`album1008`.`id` = OLD.album1008_id;$$
CREATE TRIGGER `likespisokalbumphoto1008_AINS` AFTER INSERT ON `likespisokalbumphoto1008` FOR EACH ROW UPDATE spisokalbumphoto1008 SET countlike = countlike +1 WHERE spisokalbumphoto1008.id = new.spisokalbumphoto1008_id;$$
CREATE TRIGGER `likespisokalbumphoto1008_ADEL` AFTER DELETE ON `likespisokalbumphoto1008` FOR EACH ROW UPDATE spisokalbumphoto1008 SET countlike = countlike -1 WHERE spisokalbumphoto1008.id = old.spisokalbumphoto1008_id;$$
CREATE TRIGGER `commentspisokalbumphoto1008_AINS` AFTER INSERT ON `commentspisokalbumphoto1008` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE spisokalbumphoto1008 SET countcomment= countcomment + 1 WHERE spisokalbumphoto1008.id=NEW.spisokalbumphoto1008_id; END IF$$
CREATE TRIGGER `commentspisokalbumphoto1008_ADEL` AFTER DELETE ON `commentspisokalbumphoto1008` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE spisokalbumphoto1008 SET countcomment= countcomment - 1 WHERE spisokalbumphoto1008.id=OLD.spisokalbumphoto1008_id; END IF$$
CREATE TRIGGER `likecommentspisokalbumphoto1008_AINS` AFTER INSERT ON `likecommentspisokalbumphoto1008` FOR EACH ROW UPDATE commentspisokalbumphoto1008 SET countlike = countlike +1 WHERE commentspisokalbumphoto1008.id = New.commentspisokalbumphoto1008_id;$$
CREATE TRIGGER `likecommentspisokalbumphoto1008_ADEL` AFTER DELETE ON `likecommentspisokalbumphoto1008` FOR EACH ROW UPDATE commentspisokalbumphoto1008 SET countlike = countlike -1 WHERE commentspisokalbumphoto1008.id = old.commentspisokalbumphoto1008_id;$$
CREATE TRIGGER `message1008_AINS` AFTER INSERT ON `message1008` FOR EACH ROW BEGIN DECLARE idProfile integer; SET @idProfile := 1008; IF (@idProfile = NEW.idrecepient AND NEW.extension IS NULL) THEN UPDATE profile SET countInbox = countInbox + 1 WHERE id = @idProfile; END IF; IF (@idProfile = NEW.idsender AND NEW.extension IS NULL) THEN UPDATE profile SET countOutbox = countOutbox + 1 WHERE id = @idProfile; END IF; END$$
CREATE TRIGGER `message1008_ADEL` AFTER DELETE ON `message1008` FOR EACH ROW BEGIN DECLARE idProfile integer; SET @idProfile := 1008; IF (@idProfile = OLD.idrecepient AND OLD.extension IS NULL) THEN UPDATE profile SET countinbox = countinbox - 1 WHERE id = @idProfile; END IF; IF (@idProfile = OLD.idsender AND OLD.extension IS NULL) THEN UPDATE profile SET countOutbox = countoutbox - 1 WHERE id = @idProfile; END IF; END$$
CREATE TRIGGER `contactgroup1008_BDEL` BEFORE DELETE ON contactgroup1008 FOR EACH ROW BEGIN UPDATE spisokcontactgroupuser1008 SET state = 2 WHERE contactgroup1008_id = OLD.id AND iduser not in (SELECT * FROM (SELECT DISTINCT iduser FROM spisokcontactgroupuser1008 WHERE contactgroup1008_id != OLD.id) AS X); END$$
CREATE TRIGGER `contactgroup1008_ADEL` AFTER DELETE ON contactgroup1008 FOR EACH ROW BEGIN DELETE FROM spisokcontactgroupuser1008 WHERE contactgroup1008_id is null AND state =0; END$$
CREATE TRIGGER `spisokcontactgroupuser1008_BINS` before INSERT ON  `spisokcontactgroupuser1008` FOR EACH ROW BEGIN if NEW.contactgroup1008_id IS NOT NULL and NEW.state = 0 then UPDATE contactgroup1008 SET countuser = countuser +1 WHERE contactgroup1008.id =NEW.contactgroup1008_id; SET @a= (Select count(*) from spisokcontactgroupuser1008 where iduser = NEW.iduser); if @a<=0 then UPDATE profile SET countcontact = countcontact +1 WHERE profile.id =1008; END IF;  END IF; END$$
CREATE TRIGGER `spisokcontactgroupuser1008_ADEL` AFTER DELETE ON  `spisokcontactgroupuser1008` FOR EACH ROW BEGIN if OLD.contactgroup1008_id IS NOT NULL and OLD.state = 0 then UPDATE contactgroup1008 SET countuser = countuser -1 WHERE contactgroup1008.id =OLD.contactgroup1008_id; SET @a= (Select count(*) from spisokcontactgroupuser1008 where iduser = OLD.iduser); if @a<=0 then UPDATE profile SET countcontact = countcontact -1 WHERE profile.id =1008; END IF; END IF; END$$
CREATE TRIGGER `spisokcontactgroupuser1008_AUPD` after update ON  `spisokcontactgroupuser1008` FOR EACH ROW BEGIN UPDATE profile SET countcontact = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1008 where state = 0) as y) where id =1008; if OLD.contactgroup1008_id is null and NEW.contactgroup1008_id is not null then UPDATE contactgroup1008 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1008 where state = 0 and contactgroup1008_id = NEW.contactgroup1008_id) as y) where id =NEW.contactgroup1008_id; end if;  if OLD.contactgroup1008_id is not null and NEW.contactgroup1008_id is null then UPDATE contactgroup1008 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1008 where state = 0 and contactgroup1008_id = OLD.contactgroup1008_id) as y) where id =OLD.contactgroup1008_id; end if;  if OLD.contactgroup1008_id is not null and OLD.state = 0 and NEW.state != 0  then UPDATE contactgroup1008 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1008 where state = 0 and contactgroup1008_id = OLD.contactgroup1008_id) as y) where id =OLD.contactgroup1008_id; end if; if OLD.contactgroup1008_id is not null and OLD.state != 0 and NEW.state = 0  then UPDATE contactgroup1008 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1008 where state = 0 and contactgroup1008_id = OLD.contactgroup1008_id) as y) where id =OLD.contactgroup1008_id; end if; if OLD.contactgroup1008_id != NEW.contactgroup1008_id then UPDATE contactgroup1008 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1008 where state = 0 and contactgroup1008_id = OLD.contactgroup1008_id) as y) where id =OLD.contactgroup1008_id; UPDATE contactgroup1008 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1008 where state = 0 and contactgroup1008_id = NEW.contactgroup1008_id) as y) where id =NEW.contactgroup1008_id; end if; END$$
CREATE TRIGGER `wall1009_AINS` AFTER INSERT ON wall1009 FOR EACH ROW IF NEW.extension is NULL AND NEW.`idauthor` = '1009' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` + 1 , `admin_social`.`profile`.`countwallmy` = `admin_social`.`profile`.`countwallmy` + 1 WHERE `admin_social`.`profile`.`id` = '1009'; ELSE IF NEW.extension is NULL AND NEW.`idauthor` <> '1009' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` + 1 WHERE `admin_social`.`profile`.`id` = '1009'; END IF; END IF$$
CREATE TRIGGER `wall1009_ADEL` AFTER DELETE ON wall1009 FOR EACH ROW IF OLD.extension is NULL AND OLD.`idauthor` = '1009' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` - 1, `admin_social`.`profile`.`countwallmy` = `admin_social`.`profile`.`countwallmy` - 1 WHERE `admin_social`.`profile`.`id` = '1009'; ELSE IF OLD.extension is NULL AND OLD.`idauthor` <> '1009' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` - 1 WHERE `admin_social`.`profile`.`id` = '1009'; END IF; END IF$$
CREATE TRIGGER `commentwall1009_AINS` AFTER INSERT ON `commentwall1009` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE wall1009 SET countcomment= countcomment + 1 WHERE wall1009.id=NEW.wall1009_id; END IF$$
CREATE TRIGGER `commentwall1009_ADEL` AFTER DELETE ON `commentwall1009` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE wall1009 SET countcomment= countcomment - 1 WHERE wall1009.id=OLD.wall1009_id; END IF$$
CREATE TRIGGER `likecommentwall1009_AINS` AFTER INSERT ON `likecommentwall1009` FOR EACH ROW UPDATE commentwall1009 SET countlike = countlike +1 WHERE commentwall1009.id = New.commentwall1009_id;$$
CREATE TRIGGER `likecommentwall1009_ADEL` AFTER DELETE ON `likecommentwall1009` FOR EACH ROW UPDATE commentwall1009 SET countlike = countlike -1 WHERE commentwall1009.id = old.commentwall1009_id;$$
CREATE TRIGGER `likewall1009_AINS` AFTER INSERT ON `likewall1009` FOR EACH ROW UPDATE wall1009 SET countlike = countlike +1 WHERE wall1009.id = new.wall1009_id;$$
CREATE TRIGGER `likewall1009_ADEL` AFTER DELETE ON `likewall1009` FOR EACH ROW UPDATE wall1009 SET countlike = countlike -1 WHERE wall1009.id = old.wall1009_id;$$
CREATE TRIGGER `blog1009_AINS` AFTER INSERT ON `blog1009` FOR EACH ROW IF NEW.extension is NULL AND NEW.`idauthor` = '1009' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` + 1 WHERE `admin_social`.`profile`.`id` = '1009'; ELSE IF NEW.extension is NULL AND NEW.`idauthor` <> '1009' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` + 1 WHERE `admin_social`.`profile`.`id` = '1009'; END IF; END IF$$
CREATE TRIGGER `blog1009_ADEL` AFTER DELETE ON `blog1009` FOR EACH ROW IF OLD.extension is NULL AND OLD.`idauthor` = '1009' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` - 1 WHERE `admin_social`.`profile`.`id` = '1009'; ELSE IF OLD.extension is NULL AND OLD.`idauthor` <> '1009' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` - 1 WHERE `admin_social`.`profile`.`id` = '1009'; END IF; END IF$$
CREATE TRIGGER `likeblog1009_AINS` AFTER INSERT ON `likeblog1009` FOR EACH ROW UPDATE blog1009 SET countlike = countlike +1 WHERE blog1009.id = new.blog1009_id;$$
CREATE TRIGGER `likeblog1009_ADEL` AFTER DELETE ON `likeblog1009` FOR EACH ROW UPDATE blog1009 SET countlike = countlike -1 WHERE blog1009.id = old.blog1009_id;$$
CREATE TRIGGER `commentblog1009_AINS` AFTER INSERT ON `commentblog1009` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE blog1009 SET countcomment= countcomment + 1 WHERE blog1009.id=NEW.blog1009_id; IF NEW.extension is NULL AND NEW.`profile_id` = '1009' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` + 1 WHERE `admin_social`.`profile`.`id` = '1009'; ELSE IF NEW.extension is NULL AND NEW.`profile_id` <> '1009' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` + 1 WHERE `admin_social`.`profile`.`id` = '1009'; END IF; END IF; END IF$$
CREATE TRIGGER `commentblog1009_ADEL` AFTER DELETE ON `commentblog1009` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE blog1009 SET countcomment= countcomment - 1 WHERE blog1009.id=OLD.blog1009_id; IF OLD.extension is NULL AND OLD.`profile_id` = '1009' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` - 1 WHERE `admin_social`.`profile`.`id` = '1009'; ELSE IF OLD.extension is NULL AND OLD.`profile_id` <> '1009' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` - 1 WHERE `admin_social`.`profile`.`id` = '1009'; END IF; END IF; END IF$$
CREATE TRIGGER `likecommentblog1009_AINS` AFTER INSERT ON `likecommentblog1009` FOR EACH ROW UPDATE commentblog1009 SET countlike = countlike +1 WHERE commentblog1009.id = New.commentblog1009_id;$$
CREATE TRIGGER `likecommentblog1009_ADEL` AFTER DELETE ON `likecommentblog1009` FOR EACH ROW UPDATE commentblog1009 SET countlike = countlike -1 WHERE commentblog1009.id = old.commentblog1009_id;$$
CREATE TRIGGER `album1009_AINS` AFTER INSERT ON `album1009` FOR EACH ROW UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countalbum` = `admin_social`.`profile`.`countalbum` + 1 WHERE `admin_social`.`profile`.`id` = '1009';$$
CREATE TRIGGER `album1009_ADEL` AFTER DELETE ON `album1009` FOR EACH ROW UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countalbum` = `admin_social`.`profile`.`countalbum` - 1 WHERE `admin_social`.`profile`.`id` = '1009';$$
CREATE TRIGGER `likealbum1009_AINS` AFTER INSERT ON `likealbum1009` FOR EACH ROW UPDATE album1009 SET countlike = countlike +1 WHERE album1009.id = new.album1009_id;$$
CREATE TRIGGER `likealbum1009_ADEL` AFTER DELETE ON `likealbum1009` FOR EACH ROW UPDATE album1009 SET countlike = countlike -1 WHERE album1009.id = old.album1009_id;$$
CREATE TRIGGER `commentalbum1009_AINS` AFTER INSERT ON `commentalbum1009` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE album1009 SET countcomment= countcomment + 1 WHERE album1009.id=NEW.album1009_id; END IF$$
CREATE TRIGGER `commentalbum1009_ADEL` AFTER DELETE ON `commentalbum1009` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE album1009 SET countcomment= countcomment - 1 WHERE album1009.id=OLD.album1009_id; END IF$$
CREATE TRIGGER `likecommentalbum1009_AINS` AFTER INSERT ON `likecommentalbum1009` FOR EACH ROW UPDATE commentalbum1009 SET countlike = countlike +1 WHERE commentalbum1009.id = New.commentalbum1009_id;$$
CREATE TRIGGER `likecommentalbum1009_ADEL` AFTER DELETE ON `likecommentalbum1009` FOR EACH ROW UPDATE commentalbum1009 SET countlike = countlike -1 WHERE commentalbum1009.id = old.commentalbum1009_id;$$
CREATE TRIGGER `spisokalbumphoto1009_AINS` AFTER INSERT ON `spisokalbumphoto1009` FOR EACH ROW UPDATE `admin_social`.`album1009` SET `admin_social`.`album1009`.`countphoto` = `admin_social`.`album1009`.`countphoto` + 1 WHERE `admin_social`.`album1009`.`id` = NEW.album1009_id;$$
CREATE TRIGGER `spisokalbumphoto1009_ADEL` AFTER DELETE ON `spisokalbumphoto1009` FOR EACH ROW UPDATE `admin_social`.`album1009` SET `admin_social`.`album1009`.`countphoto` = `admin_social`.`album1009`.`countphoto` - 1 WHERE `admin_social`.`album1009`.`id` = OLD.album1009_id;$$
CREATE TRIGGER `likespisokalbumphoto1009_AINS` AFTER INSERT ON `likespisokalbumphoto1009` FOR EACH ROW UPDATE spisokalbumphoto1009 SET countlike = countlike +1 WHERE spisokalbumphoto1009.id = new.spisokalbumphoto1009_id;$$
CREATE TRIGGER `likespisokalbumphoto1009_ADEL` AFTER DELETE ON `likespisokalbumphoto1009` FOR EACH ROW UPDATE spisokalbumphoto1009 SET countlike = countlike -1 WHERE spisokalbumphoto1009.id = old.spisokalbumphoto1009_id;$$
CREATE TRIGGER `commentspisokalbumphoto1009_AINS` AFTER INSERT ON `commentspisokalbumphoto1009` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE spisokalbumphoto1009 SET countcomment= countcomment + 1 WHERE spisokalbumphoto1009.id=NEW.spisokalbumphoto1009_id; END IF$$
CREATE TRIGGER `commentspisokalbumphoto1009_ADEL` AFTER DELETE ON `commentspisokalbumphoto1009` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE spisokalbumphoto1009 SET countcomment= countcomment - 1 WHERE spisokalbumphoto1009.id=OLD.spisokalbumphoto1009_id; END IF$$
CREATE TRIGGER `likecommentspisokalbumphoto1009_AINS` AFTER INSERT ON `likecommentspisokalbumphoto1009` FOR EACH ROW UPDATE commentspisokalbumphoto1009 SET countlike = countlike +1 WHERE commentspisokalbumphoto1009.id = New.commentspisokalbumphoto1009_id;$$
CREATE TRIGGER `likecommentspisokalbumphoto1009_ADEL` AFTER DELETE ON `likecommentspisokalbumphoto1009` FOR EACH ROW UPDATE commentspisokalbumphoto1009 SET countlike = countlike -1 WHERE commentspisokalbumphoto1009.id = old.commentspisokalbumphoto1009_id;$$
CREATE TRIGGER `message1009_AINS` AFTER INSERT ON `message1009` FOR EACH ROW BEGIN DECLARE idProfile integer; SET @idProfile := 1009; IF (@idProfile = NEW.idrecepient AND NEW.extension IS NULL) THEN UPDATE profile SET countInbox = countInbox + 1 WHERE id = @idProfile; END IF; IF (@idProfile = NEW.idsender AND NEW.extension IS NULL) THEN UPDATE profile SET countOutbox = countOutbox + 1 WHERE id = @idProfile; END IF; END$$
CREATE TRIGGER `message1009_ADEL` AFTER DELETE ON `message1009` FOR EACH ROW BEGIN DECLARE idProfile integer; SET @idProfile := 1009; IF (@idProfile = OLD.idrecepient AND OLD.extension IS NULL) THEN UPDATE profile SET countinbox = countinbox - 1 WHERE id = @idProfile; END IF; IF (@idProfile = OLD.idsender AND OLD.extension IS NULL) THEN UPDATE profile SET countOutbox = countoutbox - 1 WHERE id = @idProfile; END IF; END$$
CREATE TRIGGER `contactgroup1009_BDEL` BEFORE DELETE ON contactgroup1009 FOR EACH ROW BEGIN UPDATE spisokcontactgroupuser1009 SET state = 2 WHERE contactgroup1009_id = OLD.id AND iduser not in (SELECT * FROM (SELECT DISTINCT iduser FROM spisokcontactgroupuser1009 WHERE contactgroup1009_id != OLD.id) AS X); END$$
CREATE TRIGGER `contactgroup1009_ADEL` AFTER DELETE ON contactgroup1009 FOR EACH ROW BEGIN DELETE FROM spisokcontactgroupuser1009 WHERE contactgroup1009_id is null AND state =0; END$$
CREATE TRIGGER `spisokcontactgroupuser1009_BINS` before INSERT ON  `spisokcontactgroupuser1009` FOR EACH ROW BEGIN if NEW.contactgroup1009_id IS NOT NULL and NEW.state = 0 then UPDATE contactgroup1009 SET countuser = countuser +1 WHERE contactgroup1009.id =NEW.contactgroup1009_id; SET @a= (Select count(*) from spisokcontactgroupuser1009 where iduser = NEW.iduser); if @a<=0 then UPDATE profile SET countcontact = countcontact +1 WHERE profile.id =1009; END IF;  END IF; END$$
CREATE TRIGGER `spisokcontactgroupuser1009_ADEL` AFTER DELETE ON  `spisokcontactgroupuser1009` FOR EACH ROW BEGIN if OLD.contactgroup1009_id IS NOT NULL and OLD.state = 0 then UPDATE contactgroup1009 SET countuser = countuser -1 WHERE contactgroup1009.id =OLD.contactgroup1009_id; SET @a= (Select count(*) from spisokcontactgroupuser1009 where iduser = OLD.iduser); if @a<=0 then UPDATE profile SET countcontact = countcontact -1 WHERE profile.id =1009; END IF; END IF; END$$
CREATE TRIGGER `spisokcontactgroupuser1009_AUPD` after update ON  `spisokcontactgroupuser1009` FOR EACH ROW BEGIN UPDATE profile SET countcontact = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1009 where state = 0) as y) where id =1009; if OLD.contactgroup1009_id is null and NEW.contactgroup1009_id is not null then UPDATE contactgroup1009 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1009 where state = 0 and contactgroup1009_id = NEW.contactgroup1009_id) as y) where id =NEW.contactgroup1009_id; end if;  if OLD.contactgroup1009_id is not null and NEW.contactgroup1009_id is null then UPDATE contactgroup1009 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1009 where state = 0 and contactgroup1009_id = OLD.contactgroup1009_id) as y) where id =OLD.contactgroup1009_id; end if;  if OLD.contactgroup1009_id is not null and OLD.state = 0 and NEW.state != 0  then UPDATE contactgroup1009 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1009 where state = 0 and contactgroup1009_id = OLD.contactgroup1009_id) as y) where id =OLD.contactgroup1009_id; end if; if OLD.contactgroup1009_id is not null and OLD.state != 0 and NEW.state = 0  then UPDATE contactgroup1009 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1009 where state = 0 and contactgroup1009_id = OLD.contactgroup1009_id) as y) where id =OLD.contactgroup1009_id; end if; if OLD.contactgroup1009_id != NEW.contactgroup1009_id then UPDATE contactgroup1009 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1009 where state = 0 and contactgroup1009_id = OLD.contactgroup1009_id) as y) where id =OLD.contactgroup1009_id; UPDATE contactgroup1009 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1009 where state = 0 and contactgroup1009_id = NEW.contactgroup1009_id) as y) where id =NEW.contactgroup1009_id; end if; END$$
CREATE TRIGGER `wall1010_AINS` AFTER INSERT ON wall1010 FOR EACH ROW IF NEW.extension is NULL AND NEW.`idauthor` = '1010' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` + 1 , `admin_social`.`profile`.`countwallmy` = `admin_social`.`profile`.`countwallmy` + 1 WHERE `admin_social`.`profile`.`id` = '1010'; ELSE IF NEW.extension is NULL AND NEW.`idauthor` <> '1010' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` + 1 WHERE `admin_social`.`profile`.`id` = '1010'; END IF; END IF$$
CREATE TRIGGER `wall1010_ADEL` AFTER DELETE ON wall1010 FOR EACH ROW IF OLD.extension is NULL AND OLD.`idauthor` = '1010' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` - 1, `admin_social`.`profile`.`countwallmy` = `admin_social`.`profile`.`countwallmy` - 1 WHERE `admin_social`.`profile`.`id` = '1010'; ELSE IF OLD.extension is NULL AND OLD.`idauthor` <> '1010' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countwall` = `admin_social`.`profile`.`countwall` - 1 WHERE `admin_social`.`profile`.`id` = '1010'; END IF; END IF$$
CREATE TRIGGER `commentwall1010_AINS` AFTER INSERT ON `commentwall1010` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE wall1010 SET countcomment= countcomment + 1 WHERE wall1010.id=NEW.wall1010_id; END IF$$
CREATE TRIGGER `commentwall1010_ADEL` AFTER DELETE ON `commentwall1010` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE wall1010 SET countcomment= countcomment - 1 WHERE wall1010.id=OLD.wall1010_id; END IF$$
CREATE TRIGGER `likecommentwall1010_AINS` AFTER INSERT ON `likecommentwall1010` FOR EACH ROW UPDATE commentwall1010 SET countlike = countlike +1 WHERE commentwall1010.id = New.commentwall1010_id;$$
CREATE TRIGGER `likecommentwall1010_ADEL` AFTER DELETE ON `likecommentwall1010` FOR EACH ROW UPDATE commentwall1010 SET countlike = countlike -1 WHERE commentwall1010.id = old.commentwall1010_id;$$
CREATE TRIGGER `likewall1010_AINS` AFTER INSERT ON `likewall1010` FOR EACH ROW UPDATE wall1010 SET countlike = countlike +1 WHERE wall1010.id = new.wall1010_id;$$
CREATE TRIGGER `likewall1010_ADEL` AFTER DELETE ON `likewall1010` FOR EACH ROW UPDATE wall1010 SET countlike = countlike -1 WHERE wall1010.id = old.wall1010_id;$$
CREATE TRIGGER `blog1010_AINS` AFTER INSERT ON `blog1010` FOR EACH ROW IF NEW.extension is NULL AND NEW.`idauthor` = '1010' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` + 1 WHERE `admin_social`.`profile`.`id` = '1010'; ELSE IF NEW.extension is NULL AND NEW.`idauthor` <> '1010' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` + 1 WHERE `admin_social`.`profile`.`id` = '1010'; END IF; END IF$$
CREATE TRIGGER `blog1010_ADEL` AFTER DELETE ON `blog1010` FOR EACH ROW IF OLD.extension is NULL AND OLD.`idauthor` = '1010' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` - 1 WHERE `admin_social`.`profile`.`id` = '1010'; ELSE IF OLD.extension is NULL AND OLD.`idauthor` <> '1010' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblog` = `admin_social`.`profile`.`countblog` - 1 WHERE `admin_social`.`profile`.`id` = '1010'; END IF; END IF$$
CREATE TRIGGER `likeblog1010_AINS` AFTER INSERT ON `likeblog1010` FOR EACH ROW UPDATE blog1010 SET countlike = countlike +1 WHERE blog1010.id = new.blog1010_id;$$
CREATE TRIGGER `likeblog1010_ADEL` AFTER DELETE ON `likeblog1010` FOR EACH ROW UPDATE blog1010 SET countlike = countlike -1 WHERE blog1010.id = old.blog1010_id;$$
CREATE TRIGGER `commentblog1010_AINS` AFTER INSERT ON `commentblog1010` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE blog1010 SET countcomment= countcomment + 1 WHERE blog1010.id=NEW.blog1010_id; IF NEW.extension is NULL AND NEW.`profile_id` = '1010' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` + 1 WHERE `admin_social`.`profile`.`id` = '1010'; ELSE IF NEW.extension is NULL AND NEW.`profile_id` <> '1010' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` + 1 WHERE `admin_social`.`profile`.`id` = '1010'; END IF; END IF; END IF$$
CREATE TRIGGER `commentblog1010_ADEL` AFTER DELETE ON `commentblog1010` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE blog1010 SET countcomment= countcomment - 1 WHERE blog1010.id=OLD.blog1010_id; IF OLD.extension is NULL AND OLD.`profile_id` = '1010' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` - 1 WHERE `admin_social`.`profile`.`id` = '1010'; ELSE IF OLD.extension is NULL AND OLD.`profile_id` <> '1010' THEN UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countblogcomment` = `admin_social`.`profile`.`countblogcomment` - 1 WHERE `admin_social`.`profile`.`id` = '1010'; END IF; END IF; END IF$$
CREATE TRIGGER `likecommentblog1010_AINS` AFTER INSERT ON `likecommentblog1010` FOR EACH ROW UPDATE commentblog1010 SET countlike = countlike +1 WHERE commentblog1010.id = New.commentblog1010_id;$$
CREATE TRIGGER `likecommentblog1010_ADEL` AFTER DELETE ON `likecommentblog1010` FOR EACH ROW UPDATE commentblog1010 SET countlike = countlike -1 WHERE commentblog1010.id = old.commentblog1010_id;$$
CREATE TRIGGER `album1010_AINS` AFTER INSERT ON `album1010` FOR EACH ROW UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countalbum` = `admin_social`.`profile`.`countalbum` + 1 WHERE `admin_social`.`profile`.`id` = '1010';$$
CREATE TRIGGER `album1010_ADEL` AFTER DELETE ON `album1010` FOR EACH ROW UPDATE `admin_social`.`profile` SET `admin_social`.`profile`.`countalbum` = `admin_social`.`profile`.`countalbum` - 1 WHERE `admin_social`.`profile`.`id` = '1010';$$
CREATE TRIGGER `likealbum1010_AINS` AFTER INSERT ON `likealbum1010` FOR EACH ROW UPDATE album1010 SET countlike = countlike +1 WHERE album1010.id = new.album1010_id;$$
CREATE TRIGGER `likealbum1010_ADEL` AFTER DELETE ON `likealbum1010` FOR EACH ROW UPDATE album1010 SET countlike = countlike -1 WHERE album1010.id = old.album1010_id;$$
CREATE TRIGGER `commentalbum1010_AINS` AFTER INSERT ON `commentalbum1010` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE album1010 SET countcomment= countcomment + 1 WHERE album1010.id=NEW.album1010_id; END IF$$
CREATE TRIGGER `commentalbum1010_ADEL` AFTER DELETE ON `commentalbum1010` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE album1010 SET countcomment= countcomment - 1 WHERE album1010.id=OLD.album1010_id; END IF$$
CREATE TRIGGER `likecommentalbum1010_AINS` AFTER INSERT ON `likecommentalbum1010` FOR EACH ROW UPDATE commentalbum1010 SET countlike = countlike +1 WHERE commentalbum1010.id = New.commentalbum1010_id;$$
CREATE TRIGGER `likecommentalbum1010_ADEL` AFTER DELETE ON `likecommentalbum1010` FOR EACH ROW UPDATE commentalbum1010 SET countlike = countlike -1 WHERE commentalbum1010.id = old.commentalbum1010_id;$$
CREATE TRIGGER `spisokalbumphoto1010_AINS` AFTER INSERT ON `spisokalbumphoto1010` FOR EACH ROW UPDATE `admin_social`.`album1010` SET `admin_social`.`album1010`.`countphoto` = `admin_social`.`album1010`.`countphoto` + 1 WHERE `admin_social`.`album1010`.`id` = NEW.album1010_id;$$
CREATE TRIGGER `spisokalbumphoto1010_ADEL` AFTER DELETE ON `spisokalbumphoto1010` FOR EACH ROW UPDATE `admin_social`.`album1010` SET `admin_social`.`album1010`.`countphoto` = `admin_social`.`album1010`.`countphoto` - 1 WHERE `admin_social`.`album1010`.`id` = OLD.album1010_id;$$
CREATE TRIGGER `likespisokalbumphoto1010_AINS` AFTER INSERT ON `likespisokalbumphoto1010` FOR EACH ROW UPDATE spisokalbumphoto1010 SET countlike = countlike +1 WHERE spisokalbumphoto1010.id = new.spisokalbumphoto1010_id;$$
CREATE TRIGGER `likespisokalbumphoto1010_ADEL` AFTER DELETE ON `likespisokalbumphoto1010` FOR EACH ROW UPDATE spisokalbumphoto1010 SET countlike = countlike -1 WHERE spisokalbumphoto1010.id = old.spisokalbumphoto1010_id;$$
CREATE TRIGGER `commentspisokalbumphoto1010_AINS` AFTER INSERT ON `commentspisokalbumphoto1010` FOR EACH ROW IF NEW.extension is NULL THEN UPDATE spisokalbumphoto1010 SET countcomment= countcomment + 1 WHERE spisokalbumphoto1010.id=NEW.spisokalbumphoto1010_id; END IF$$
CREATE TRIGGER `commentspisokalbumphoto1010_ADEL` AFTER DELETE ON `commentspisokalbumphoto1010` FOR EACH ROW IF OLD.extension is NULL THEN UPDATE spisokalbumphoto1010 SET countcomment= countcomment - 1 WHERE spisokalbumphoto1010.id=OLD.spisokalbumphoto1010_id; END IF$$
CREATE TRIGGER `likecommentspisokalbumphoto1010_AINS` AFTER INSERT ON `likecommentspisokalbumphoto1010` FOR EACH ROW UPDATE commentspisokalbumphoto1010 SET countlike = countlike +1 WHERE commentspisokalbumphoto1010.id = New.commentspisokalbumphoto1010_id;$$
CREATE TRIGGER `likecommentspisokalbumphoto1010_ADEL` AFTER DELETE ON `likecommentspisokalbumphoto1010` FOR EACH ROW UPDATE commentspisokalbumphoto1010 SET countlike = countlike -1 WHERE commentspisokalbumphoto1010.id = old.commentspisokalbumphoto1010_id;$$
CREATE TRIGGER `message1010_AINS` AFTER INSERT ON `message1010` FOR EACH ROW BEGIN DECLARE idProfile integer; SET @idProfile := 1010; IF (@idProfile = NEW.idrecepient AND NEW.extension IS NULL) THEN UPDATE profile SET countInbox = countInbox + 1 WHERE id = @idProfile; END IF; IF (@idProfile = NEW.idsender AND NEW.extension IS NULL) THEN UPDATE profile SET countOutbox = countOutbox + 1 WHERE id = @idProfile; END IF; END$$
CREATE TRIGGER `message1010_ADEL` AFTER DELETE ON `message1010` FOR EACH ROW BEGIN DECLARE idProfile integer; SET @idProfile := 1010; IF (@idProfile = OLD.idrecepient AND OLD.extension IS NULL) THEN UPDATE profile SET countinbox = countinbox - 1 WHERE id = @idProfile; END IF; IF (@idProfile = OLD.idsender AND OLD.extension IS NULL) THEN UPDATE profile SET countOutbox = countoutbox - 1 WHERE id = @idProfile; END IF; END$$
CREATE TRIGGER `contactgroup1010_BDEL` BEFORE DELETE ON contactgroup1010 FOR EACH ROW BEGIN UPDATE spisokcontactgroupuser1010 SET state = 2 WHERE contactgroup1010_id = OLD.id AND iduser not in (SELECT * FROM (SELECT DISTINCT iduser FROM spisokcontactgroupuser1010 WHERE contactgroup1010_id != OLD.id) AS X); END$$
CREATE TRIGGER `contactgroup1010_ADEL` AFTER DELETE ON contactgroup1010 FOR EACH ROW BEGIN DELETE FROM spisokcontactgroupuser1010 WHERE contactgroup1010_id is null AND state =0; END$$
CREATE TRIGGER `spisokcontactgroupuser1010_BINS` before INSERT ON  `spisokcontactgroupuser1010` FOR EACH ROW BEGIN if NEW.contactgroup1010_id IS NOT NULL and NEW.state = 0 then UPDATE contactgroup1010 SET countuser = countuser +1 WHERE contactgroup1010.id =NEW.contactgroup1010_id; SET @a= (Select count(*) from spisokcontactgroupuser1010 where iduser = NEW.iduser); if @a<=0 then UPDATE profile SET countcontact = countcontact +1 WHERE profile.id =1010; END IF;  END IF; END$$
CREATE TRIGGER `spisokcontactgroupuser1010_ADEL` AFTER DELETE ON  `spisokcontactgroupuser1010` FOR EACH ROW BEGIN if OLD.contactgroup1010_id IS NOT NULL and OLD.state = 0 then UPDATE contactgroup1010 SET countuser = countuser -1 WHERE contactgroup1010.id =OLD.contactgroup1010_id; SET @a= (Select count(*) from spisokcontactgroupuser1010 where iduser = OLD.iduser); if @a<=0 then UPDATE profile SET countcontact = countcontact -1 WHERE profile.id =1010; END IF; END IF; END$$
CREATE TRIGGER `spisokcontactgroupuser1010_AUPD` after update ON  `spisokcontactgroupuser1010` FOR EACH ROW BEGIN UPDATE profile SET countcontact = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1010 where state = 0) as y) where id =1010; if OLD.contactgroup1010_id is null and NEW.contactgroup1010_id is not null then UPDATE contactgroup1010 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1010 where state = 0 and contactgroup1010_id = NEW.contactgroup1010_id) as y) where id =NEW.contactgroup1010_id; end if;  if OLD.contactgroup1010_id is not null and NEW.contactgroup1010_id is null then UPDATE contactgroup1010 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1010 where state = 0 and contactgroup1010_id = OLD.contactgroup1010_id) as y) where id =OLD.contactgroup1010_id; end if;  if OLD.contactgroup1010_id is not null and OLD.state = 0 and NEW.state != 0  then UPDATE contactgroup1010 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1010 where state = 0 and contactgroup1010_id = OLD.contactgroup1010_id) as y) where id =OLD.contactgroup1010_id; end if; if OLD.contactgroup1010_id is not null and OLD.state != 0 and NEW.state = 0  then UPDATE contactgroup1010 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1010 where state = 0 and contactgroup1010_id = OLD.contactgroup1010_id) as y) where id =OLD.contactgroup1010_id; end if; if OLD.contactgroup1010_id != NEW.contactgroup1010_id then UPDATE contactgroup1010 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1010 where state = 0 and contactgroup1010_id = OLD.contactgroup1010_id) as y) where id =OLD.contactgroup1010_id; UPDATE contactgroup1010 SET countuser = (Select count(*) from (select distinct iduser as x from spisokcontactgroupuser1010 where state = 0 and contactgroup1010_id = NEW.contactgroup1010_id) as y) where id =NEW.contactgroup1010_id; end if; END$$
